// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Acquisition.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ACQ_QRZ_InstrumentSetupCalibration_MultiFunctionAcquisitionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition", "In order to acquire multi function methods and have each function calibrated prop" +
                    "erly\r\nI want to be able to check the calibration used for each method function", ProgrammingLanguage.CSharp, new string[] {
                        "InstrumentSetupAcquisition"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")))
            {
                Quartz.Features.Acquisition.FeatureFiles.ACQ_QRZ_InstrumentSetupCalibration_MultiFunctionAcquisitionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 47
#line 48
 testRunner.Given("I have set positive and negative ADC values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
  testRunner.And("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Baffle Position",
                        "Reservoir",
                        "Flow Path",
                        "Flow Rate"});
            table1.AddRow(new string[] {
                        "Reference",
                        "B",
                        "Infusion",
                        "40.00"});
#line 50
  testRunner.And("reference fluidics are set to", ((string)(null)), table1, "And ");
#line 53
  testRunner.And("the reference fluidic level is not less than \'25.00\' minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.And("the instrument has a beam", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("the Instrument Setup page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("the Instrument Setup process is not running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.And("ADC Setup, Instrument Setup Detector Setup and Resolution Optimisation has been r" +
                    "un for all modes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mass",
                        "POS RES",
                        "NEG RES",
                        "POS SENS",
                        "NEG SENS"});
            table2.AddRow(new string[] {
                        "Mass Calibration 1000",
                        "",
                        "X",
                        "X",
                        ""});
            table2.AddRow(new string[] {
                        "Mass Calibration 2000",
                        "X",
                        "X",
                        "X",
                        "X"});
            table2.AddRow(new string[] {
                        "Mass Calibration 4000",
                        "X",
                        "",
                        "X",
                        ""});
#line 58
  testRunner.And("Instrument Setup Calibration has been run successfully for the following \'X\' slot" +
                    "s", ((string)(null)), table2, "And ");
#line hidden
        }
        
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune(string testName, string methodType, string lockMass1, string lockMass2, string lowMass, string highMass, string polarity, string mode, string slotCalibrationUsed, string methodName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e", exampleTags);
#line 73
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line 74
  testRunner.Given(string.Format("a new Acquisition Method \'{0}\' XML file is created called \'{1}\'", methodType, methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
   testRunner.And(string.Format("the XML file {0} method has a short Run Duration with Low Mass {1}, High Mass {2}" +
                        ", Lock Mass 1 {3} and Lock Mass 2 {4} parameters set", methodName, lowMass, highMass, lockMass1, lockMass2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
   testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.When(string.Format("the \'{0}\' is selected to be run via Acquisition | Custom Tune XML", methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.Then(string.Format("the acquisition has had the calibration applied for mass {0}, polarity {1} and mo" +
                        "de {2}", highMass, polarity, mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "1900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 2000,  2: POS RES 2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_MSe()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("MSe", "MSe", "N/A", "N/A", "1900", "2000", "Positive", "Resolution", "1: POS RES 2000,  2: POS RES 2000", "Automation_MultiFunctionAcquisition_MSe.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "3900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "4000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 4000, 2: POS SENS 4000, 3: POS SENS 4000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_SingleLockMass.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_MSeSingleLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("MSe + Single LM", "MSe", "556.27", "N/A", "3900", "4000", "Positive", "Sensitivity", "1: POS SENS 4000, 2: POS SENS 4000, 3: POS SENS 4000", "Automation_MultiFunctionAcquisition_MSe_SingleLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 1000,   2: NEG RES 1000  , 3: NEG RES 1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_DualLockMass.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_MSeDualLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("MSe + Dual LM", "MSe", "556.27", "278.1", "900", "1000", "Negative", "Resolution", "1: NEG RES 1000,   2: NEG RES 1000  , 3: NEG RES 1000", "Automation_MultiFunctionAcquisition_MSe_DualLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "1900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 2000, 2: NEG SENS 2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_HD_MSe()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("HD-MSe", "HDMSe", "N/A", "N/A", "1900", "2000", "Negative", "Sensitivity", "1: NEG SENS 2000, 2: NEG SENS 2000", "Automation_MultiFunctionAcquisition_HDMSe.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "1900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe_SingleLockMass.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_HD_MSeSingleLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("HD-MSe + Single LM", "HDMSe", "556.27", "N/A", "1900", "2000", "Positive", "Resolution", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000", "Automation_MultiFunctionAcquisition_HDMSe_SingleLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "900")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 1000 , 2: POS SENS 1000 , 3: POS SENS 1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe_DualLockMass.xml")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MSeMethods_HD_MSeDualLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune("HD-MSe + Dual LM", "HDMSe", "556.27", "278.1", "900", "1000", "Positive", "Sensitivity", "1: POS SENS 1000 , 2: POS SENS 1000 , 3: POS SENS 1000", "Automation_MultiFunctionAcquisition_HDMSe_DualLockMass.xml", ((string[])(null)));
        }
        
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_NoCalibrationApplied(string testName, string methodType, string lockMass1, string lockMass2, string lowMass, string highMass, string polarity, string mode, string slotCalibrationUsed, string methodName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
                    "n Create - No Calibration Applied", exampleTags);
#line 100
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line 101
  testRunner.Given(string.Format("a new Acquisition Method \'{0}\' XML file is created called \'{1}\'", methodType, methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
   testRunner.And(string.Format("the XML file {0} method has a short Run Duration with Low Mass {1}, High Mass {2}" +
                        ", Lock Mass 1 {3} and Lock Mass 2 {4} parameters set", methodName, lowMass, highMass, lockMass1, lockMass2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
   testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.When(string.Format("the \'{0}\' is selected to be run via Acquisition | Custom Tune XML", methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.Then("no calibration has been applied to all \'2\' functions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create - No Calibration Applied")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods - No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: None (N/A),  2: None (N/A)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_NoCalibration.xml")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_NoCalibrationApplied_MSeMethods_NoCalibration_MSeNoCalibration()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_NoCalibrationApplied("MSe + No Calibration", "MSe", "N/A", "N/A", "50", "500", "Positive", "Resolution", "1: None (N/A),  2: None (N/A)", "Automation_MultiFunctionAcquisition_MSe_NoCalibration.xml", ((string[])(null)));
        }
        
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing(string methodName, string lockMass1, string lockMass2, string startMass, string endMass, string calibrationApplied, string polarity, string mode, string slotCalibrationUsed, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)", @__tags);
#line 115
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line 116
  testRunner.Given("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 117
   testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
   testRunner.And("Leucine Enkephalin is selected via the Fluidics Reference vial", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
   testRunner.And(string.Format("a new \'{0}\' is selected to be run via Acquisition | Custom Tune XML", methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.Then(string.Format("the acquisition has had the calibration applied for mass {0}, polarity {1} and mo" +
                        "de {2}", calibrationApplied, polarity, mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse_fullhd.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse_fullhd.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 2000, 2: POS SENS 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_Mse_Fullhd_Xml()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("mse_fullhd.xml", "N/A", "N/A", "100", "1200", "2000", "Positive", "Sensitivity", "1: POS SENS 2000, 2: POS SENS 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse_trend")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse_trend")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 2000,  2: NEG RES 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_Mse_Trend()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("mse_trend", "N/A", "N/A", "100", "1200", "2000", "Negative", "Resolution", "1: NEG RES 2000,  2: NEG RES 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TofMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "TofMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 2000, 2: POS SENS 2000, 3: POS SENS 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_TofMRM_Xml()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("TofMRM.xml", "N/A", "N/A", "50", "1200", "2000", "Positive", "Sensitivity", "1: POS SENS 2000, 2: POS SENS 2000, 3: POS SENS 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HDMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "HDMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 2000,  2: NEG RES 2000,  3: NEG RES 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_HDMRM_Xml()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("HDMRM.xml", "N/A", "N/A", "50", "1200", "2000", "Negative", "Resolution", "1: NEG RES 2000,  2: NEG RES 2000,  3: NEG RES 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 2000,  2: POS RES 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_Mse_Xml()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("mse.xml", "N/A", "N/A", "100", "1200", "2000", "Positive", "Resolution", "1: POS RES 2000,  2: POS RES 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HSMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "HSMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Calibration Applied", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 2000, 2: NEG SENS 2000, 3: NEG SENS 2000")]
        public virtual void ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_HSMRM_Xml()
        {
            this.ACQ_03_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing("HSMRM.xml", "N/A", "N/A", "50", "1200", "2000", "Negative", "Sensitivity", "1: NEG SENS 2000, 2: NEG SENS 2000, 3: NEG SENS 2000", ((string[])(null)));
        }
        
        public virtual void ACQ_04_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_LockMassSetupFails(string methodName, string lockMass1, string lockMass2, string startMass, string endMass, string polarity, string mode, string slotCalibrationUsed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-04 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing) - L" +
                    "ockMass Setup Fails", exampleTags);
#line 138
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line 139
  testRunner.Given("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 140
   testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
   testRunner.And("Leucine Enkephalin is selected via the Fluidics Reference vial", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
  testRunner.When(string.Format("I try to run \'{0}\' method via Acquisition | Custom Tune XML", methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
  testRunner.Then("no scan data is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-04 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing) - L" +
            "ockMass Setup Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ms_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "ms_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 1000, 2: NEG SENS 1000")]
        public virtual void ACQ_04_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_LockMassSetupFails_Ms_Lockmass_Xml()
        {
            this.ACQ_04_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_LockMassSetupFails("ms_lockmass.xml", "556.27", "N/A", "100", "1000", "Negative", "Sensitivity", "1: NEG SENS 1000, 2: NEG SENS 1000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-04 - InstrumentSetupMultiFunctionAcquisition - Custom Tune (Pre-existing) - L" +
            "ockMass Setup Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ms_dual_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "ms_dual_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 1000,  2: POS RES 1000")]
        public virtual void ACQ_04_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_LockMassSetupFails_Ms_Dual_Lockmass_Xml()
        {
            this.ACQ_04_InstrumentSetupMultiFunctionAcquisition_CustomTunePre_Existing_LockMassSetupFails("ms_dual_lockmass.xml", "556.27", "278.1", "100", "1000", "Positive", "Resolution", "1: POS RES 1000,  2: POS RES 1000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-05 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e - Multi Function MS - High Mass 4000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_05_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MultiFunctionMS_HighMass4000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-05 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e - Multi Function MS - High Mass 4000", ((string[])(null)));
#line 150
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table3.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "450",
                        "500"});
            table3.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "950",
                        "1000"});
            table3.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "1950",
                        "2000"});
            table3.AddRow(new string[] {
                        "4",
                        "MS",
                        "N/A",
                        "N/A",
                        "3950",
                        "4000"});
#line 151
  testRunner.Given("a new \'MS_4Functions.xml\' XML file is manually created and saved with the followi" +
                    "ng functions", ((string)(null)), table3, "Given ");
#line 157
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
   testRunner.And("the mode is Resolution and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
   testRunner.And("\'MS_4Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
   testRunner.And("the acquisition is Stopped after \'30\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
  testRunner.Then("the acquisition has had the calibration applied to all \'4\' functions of mass \'400" +
                    "0\', polarity \'Positive\' and mode \'Resolution\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-06 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e - Multi Function MS - 3 functions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_06_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MultiFunctionMS_3Functions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-06 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e - Multi Function MS - 3 functions", ((string[])(null)));
#line 167
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table4.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "450",
                        "500"});
            table4.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "950",
                        "1000"});
            table4.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "1950",
                        "2000"});
#line 168
  testRunner.Given("a new \'MS_3Functions.xml\' XML file is manually created and saved with the followi" +
                    "ng functions", ((string)(null)), table4, "Given ");
#line 173
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
   testRunner.And("the mode is Sensitivity and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
   testRunner.And("\'MS_3Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.Then("the acquisition has had the calibration applied to all \'3\' functions of mass \'200" +
                    "0\', polarity \'Positive\' and mode \'Sensitivity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-07 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e - Multi Function MS with Single Lock Mass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void ACQ_07_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MultiFunctionMSWithSingleLockMass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-07 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e - Multi Function MS with Single Lock Mass", new string[] {
                        "SmokeTest"});
#line 183
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table5.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "450",
                        "500"});
            table5.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "1900",
                        "2000"});
            table5.AddRow(new string[] {
                        "3",
                        "LockMass",
                        "554.27",
                        "N/A",
                        "N/A",
                        "N/A"});
#line 184
  testRunner.Given("a new \'MS_2Functions_SingleLockMass.xml\' XML file is manually created and saved w" +
                    "ith the following functions", ((string)(null)), table5, "Given ");
#line 189
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
   testRunner.And("the mode is Resolution and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
   testRunner.And("\'MS_2Functions_SingleLockMass.xml\' is selected to be run via Acquisition | Custom" +
                    " Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
  testRunner.Then("the acquisition has had the calibration applied to all \'3\' functions of mass \'200" +
                    "0\', polarity \'Negative\' and mode \'Resolution\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-08 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e - Multi Function MS - No Calibration Applied")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_08_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MultiFunctionMS_NoCalibrationApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-08 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e - Multi Function MS - No Calibration Applied", ((string[])(null)));
#line 199
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table6.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "550",
                        "600"});
            table6.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "1950",
                        "2000"});
            table6.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "3900",
                        "4000"});
#line 200
  testRunner.Given("a new \'MS_3Functions_NoCalibration.xml\' XML file is manually created and saved wi" +
                    "th the following functions", ((string)(null)), table6, "Given ");
#line 205
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
   testRunner.And("\'MS_3Functions_NoCalibration.xml\' is selected to be run via Acquisition | Custom " +
                    "Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
  testRunner.Then("no calibration has been applied to all \'3\' functions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-09 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
            "g - Multi Function MRM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_09_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsing_MultiFunctionMRM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-09 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
                    "g - Multi Function MRM", ((string[])(null)));
#line 214
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table7.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "450",
                        "500",
                        "460.9"});
            table7.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "950",
                        "1000",
                        "966.9"});
            table7.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "1950",
                        "2000",
                        "1952.8"});
            table7.AddRow(new string[] {
                        "4",
                        "MRM",
                        "N/A",
                        "N/A",
                        "3950",
                        "4000",
                        "3962.6"});
#line 215
  testRunner.Given("a new \'MRM_4Functions.xml\' XML file is manually created and saved with the follow" +
                    "ing functions", ((string)(null)), table7, "Given ");
#line 221
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
   testRunner.And("the mode is Resolution and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
   testRunner.And("\'MRM_4Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
  testRunner.Then("the acquisition has had the calibration applied to all \'4\' functions of mass \'400" +
                    "0\', polarity \'Positive\' and mode \'Resolution\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-10 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
            "g - Multi Function MRM with Dual Lock Mass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_10_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsing_MultiFunctionMRMWithDualLockMass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-10 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
                    "g - Multi Function MRM with Dual Lock Mass", ((string[])(null)));
#line 231
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table8.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "450",
                        "500",
                        "452.9"});
            table8.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "1900",
                        "2000",
                        "1950.8"});
            table8.AddRow(new string[] {
                        "3",
                        "LockMass",
                        "475.27",
                        "1150.1",
                        "N/A",
                        "N/A",
                        "N/A"});
#line 232
  testRunner.Given("a new \'MRM_2Functions_DualLockMass.xml\' XML file is manually created and saved wi" +
                    "th the following functions", ((string)(null)), table8, "Given ");
#line 237
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
   testRunner.And("\'MRM_2Functions_DualLockMass.xml\' is selected to be run via Acquisition | Custom " +
                    "Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
  testRunner.Then("the acquisition has had the calibration applied to all \'3\' functions of mass \'200" +
                    "0\', polarity \'Negative\' and mode \'Sensitivity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-11 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
            "g - Multi Function MRM - No Calibration Applied")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        public virtual void ACQ_11_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsing_MultiFunctionMRM_NoCalibrationApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-11 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
                    "g - Multi Function MRM - No Calibration Applied", ((string[])(null)));
#line 247
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table9.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "2450",
                        "2500",
                        "2451.9"});
            table9.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "2950",
                        "3000",
                        "2951.9"});
            table9.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "3950",
                        "4000",
                        "3960.8"});
#line 248
  testRunner.Given("a new \'MRM_3Functions_NoCalibration.xml\' XML file is manually created and saved w" +
                    "ith the following functions", ((string)(null)), table9, "Given ");
#line 253
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
   testRunner.And("\'MRM_3Functions_NoCalibration.xml\' is selected to be run via Acquisition | Custom" +
                    " Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
  testRunner.Then("no calibration has been applied to all \'3\' functions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-12 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e - Multi Function MS - High Mass 70000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        public virtual void ACQ_12_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTune_MultiFunctionMS_HighMass70000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-12 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e - Multi Function MS - High Mass 70000", new string[] {
                        "Obsolete",
                        "ignore"});
#line 265
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table10.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "450",
                        "500"});
            table10.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "950",
                        "1000"});
            table10.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "1950",
                        "2000"});
            table10.AddRow(new string[] {
                        "4",
                        "MS",
                        "N/A",
                        "N/A",
                        "4950",
                        "5000"});
            table10.AddRow(new string[] {
                        "5",
                        "MS",
                        "N/A",
                        "N/A",
                        "7950",
                        "8000"});
            table10.AddRow(new string[] {
                        "6",
                        "MS",
                        "N/A",
                        "N/A",
                        "13950",
                        "14000"});
            table10.AddRow(new string[] {
                        "7",
                        "MS",
                        "N/A",
                        "N/A",
                        "31950",
                        "32000"});
            table10.AddRow(new string[] {
                        "8",
                        "MS",
                        "N/A",
                        "N/A",
                        "69950",
                        "70000"});
#line 266
  testRunner.Given("a new \'MS_8Functions.xml\' XML file is manually created and saved with the followi" +
                    "ng functions", ((string)(null)), table10, "Given ");
#line 276
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 277
   testRunner.And("the mode is Resolution and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
   testRunner.And("\'MS_8Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
   testRunner.And("the acquisition is Stopped after \'30\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
  testRunner.Then("the acquisition has had the calibration applied to all \'5\' functions of mass \'700" +
                    "00\', polarity \'Positive\' and mode \'Resolution\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-13 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
            "g - Multi Function MRM with Lock Mass - High Mass 32000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ACQ - QRZ - Instrument Setup (Calibration) - Multi Function Acquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetupAcquisition")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        public virtual void ACQ_13_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsing_MultiFunctionMRMWithLockMass_HighMass32000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-13 - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usin" +
                    "g - Multi Function MRM with Lock Mass - High Mass 32000", new string[] {
                        "Obsolete",
                        "ignore"});
#line 289
 this.ScenarioSetup(scenarioInfo);
#line 47
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table11.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "500",
                        "452.9"});
            table11.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "32000",
                        "2900.5"});
            table11.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "2000",
                        "1268.8"});
            table11.AddRow(new string[] {
                        "4",
                        "LockMass",
                        "556.27",
                        "278.1",
                        "N/A",
                        "N/A",
                        "N/A"});
#line 290
  testRunner.Given("a new \'MRM_3Functions_DualLockMass.xml\' XML file is manually created and saved wi" +
                    "th the following functions", ((string)(null)), table11, "Given ");
#line 296
   testRunner.And("that the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
   testRunner.And("\'MRM_3Functions_DualLockMass.xml\' is selected to be run via Acquisition | Custom " +
                    "Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
  testRunner.Then("the acquisition has had the calibration applied to all \'4\' functions of mass \'320" +
                    "00\', polarity \'Negative\' and mode \'Sensitivity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
