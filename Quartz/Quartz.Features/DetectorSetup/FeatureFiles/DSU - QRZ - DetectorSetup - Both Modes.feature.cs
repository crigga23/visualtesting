// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.DetectorSetup.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DSU_QRZ_DetectorSetup_BothModesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DSU - QRZ - DetectorSetup - Both Modes.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DSU - QRZ - DetectorSetup - Both Modes", "In order to check \'Detector Setup\' processes with both the modes within a Quartz " +
                    "environment\r\nI want to check that the function as expected and generates the exp" +
                    "ected outputs.", ProgrammingLanguage.CSharp, new string[] {
                        "DetectorSetup"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DSU - QRZ - DetectorSetup - Both Modes")))
            {
                Quartz.Features.DetectorSetup.FeatureFiles.DSU_QRZ_DetectorSetup_BothModesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 53
#line 54
testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Baffle Position",
                        "Reservoir",
                        "Flow Path",
                        "Flow Rate"});
            table1.AddRow(new string[] {
                        "Reference",
                        "B",
                        "Infusion",
                        "20.00"});
#line 56
 testRunner.And("reference fluidics are set to", ((string)(null)), table1, "And ");
#line 59
 testRunner.And("the reference fluidic level is not less than \'10.00\' minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("the instrument has a beam", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("you start reference infusing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("that the Quartz Detector Setup page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
testRunner.When("detector setup is run for \'Both\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DSU - 01 - DetectorSetup - Both Mode - Positive Mass Results - Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DSU - QRZ - DetectorSetup - Both Modes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DetectorSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void DSU_01_DetectorSetup_BothMode_PositiveMassResults_Range()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DSU - 01 - DetectorSetup - Both Mode - Positive Mass Results - Range", new string[] {
                        "SmokeTest"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Minimum",
                        "Maximum"});
            table2.AddRow(new string[] {
                        "Positive Detector Voltage",
                        "0",
                        "3950"});
            table2.AddRow(new string[] {
                        "Positive Ion Area",
                        "0",
                        "100"});
            table2.AddRow(new string[] {
                        "Negative Detector Voltage",
                        "0",
                        "3950"});
            table2.AddRow(new string[] {
                        "Negative Ion Area",
                        "0",
                        "100"});
#line 69
testRunner.Then("the field value is between Minimum and Maximum", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DSU - 02 - DetectorSetup - Both mode - Negative Mass Results - Status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DSU - QRZ - DetectorSetup - Both Modes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DetectorSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void DSU_02_DetectorSetup_BothMode_NegativeMassResults_Status()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DSU - 02 - DetectorSetup - Both mode - Negative Mass Results - Status", new string[] {
                        "SmokeTest"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Positive Status",
                        "Complete"});
            table3.AddRow(new string[] {
                        "Negative Status",
                        "Complete"});
#line 78
testRunner.Then("the field value should be", ((string)(null)), table3, "Then ");
#line 82
 testRunner.And("the Detector Setup should complete within 10 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DSU - 03 - DetectorSetup - Both mode - Progress Log - Messages")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DSU - QRZ - DetectorSetup - Both Modes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DetectorSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void DSU_03_DetectorSetup_BothMode_ProgressLog_Messages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DSU - 03 - DetectorSetup - Both mode - Progress Log - Messages", new string[] {
                        "SmokeTest"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table4.AddRow(new string[] {
                        "IPP check beam too weak"});
            table4.AddRow(new string[] {
                        "Detector Level Ramping up to"});
            table4.AddRow(new string[] {
                        "IPP check at voltage"});
#line 86
testRunner.Then("the message should exist in the Progress Log", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DSU - 04 - DetectorSetup - Both mode - Positive and Negative Mass Results - Value" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DSU - QRZ - DetectorSetup - Both Modes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DetectorSetup")]
        public virtual void DSU_04_DetectorSetup_BothMode_PositiveAndNegativeMassResults_Values()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DSU - 04 - DetectorSetup - Both mode - Positive and Negative Mass Results - Value" +
                    "s", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 94
testRunner.Then("the Mass Results values match the Progress Log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
