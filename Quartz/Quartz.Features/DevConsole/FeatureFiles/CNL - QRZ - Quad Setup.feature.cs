// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.DevConsole.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CNL_QRZ_QuadSetupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CNL - QRZ - Quad Setup.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CNL - QRZ - QuadSetup", "In order to setup a Quad\r\nI want to be able to configure the Quad control paramet" +
                    "ers\r\nAnd customize my view of the real-time peaks", ProgrammingLanguage.CSharp, new string[] {
                        "QuadSetup"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "CNL - QRZ - QuadSetup")))
            {
                Quartz.Features.DevConsole.FeatureFiles.CNL_QRZ_QuadSetupFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 65
#line 66
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
  testRunner.And("the mode is Sensitivity and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("the browser is opened on the Quad Setup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 01 - Automatic Quad Setup Tuning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void QUD_01_AutomaticQuadSetupTuning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 01 - Automatic Quad Setup Tuning", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 76
 testRunner.Then("quad setup tuning will start automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 02 - Quad Parameter Ranges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_02_QuadParameterRanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 02 - Quad Parameter Ranges", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table1.AddRow(new string[] {
                        "Low Mass Resolution",
                        "0.00",
                        "100.00",
                        "0.01"});
            table1.AddRow(new string[] {
                        "High Mass Resolution",
                        "0.00",
                        "100.00",
                        "0.01"});
            table1.AddRow(new string[] {
                        "Linearity",
                        "0.000",
                        "100.000",
                        "0.001"});
            table1.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "0.00",
                        "100.00",
                        "0.01"});
            table1.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "0.00",
                        "100.00",
                        "0.01"});
            table1.AddRow(new string[] {
                        "LM Resolution",
                        "0.0",
                        "25.0",
                        "0.1"});
            table1.AddRow(new string[] {
                        "HM Resolution",
                        "0.0",
                        "25.0",
                        "0.1"});
            table1.AddRow(new string[] {
                        "Ion Energy",
                        "-5.0",
                        "5.0",
                        "0.1"});
#line 81
 testRunner.Then("Quad values outside the Min or Max cannot be entered for the following parameters" +
                    "", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void QUD_03_DefaultValues(string quad, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 03 - Default Values", exampleTags);
#line 96
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 97
 testRunner.Given(string.Format("the quad is a {0}", quad), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
  testRunner.And("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And("the browser is opened on the Quad Setup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "3940 Default Value",
                        "8000 Default Value",
                        "32000 Default Value",
                        "Resolution"});
            table2.AddRow(new string[] {
                        "Mass 1",
                        "172.88",
                        "172.88",
                        "172.88",
                        "0.01"});
            table2.AddRow(new string[] {
                        "Mass 2",
                        "622.57",
                        "1971.61",
                        "1971.61",
                        "0.01"});
            table2.AddRow(new string[] {
                        "Mass 3",
                        "1072.25",
                        "4070.13",
                        "4220.02",
                        "0.01"});
            table2.AddRow(new string[] {
                        "Mass 4",
                        "1971.61",
                        "5868.86",
                        "7367.80",
                        "0.01"});
            table2.AddRow(new string[] {
                        "Span(Da)",
                        "4",
                        "4",
                        "4",
                        "na"});
            table2.AddRow(new string[] {
                        "Time per Step(Sec)",
                        "0.023",
                        "0.023",
                        "0.023",
                        "na"});
            table2.AddRow(new string[] {
                        "No.of Steps",
                        "20",
                        "20",
                        "20",
                        "na"});
            table2.AddRow(new string[] {
                        "Detector Window(Da)",
                        "100",
                        "100",
                        "100",
                        "na"});
            table2.AddRow(new string[] {
                        "Mode",
                        "Normal",
                        "Normal",
                        "Normal",
                        "na"});
            table2.AddRow(new string[] {
                        "Polarity",
                        "Position1",
                        "Position1",
                        "Position1",
                        "na"});
            table2.AddRow(new string[] {
                        "LM Resolution",
                        "4.7",
                        "4.7",
                        "4.7",
                        "0.1"});
            table2.AddRow(new string[] {
                        "HM Resolution",
                        "15.0",
                        "15.0",
                        "15.0",
                        "0.1"});
            table2.AddRow(new string[] {
                        "Ion Energy",
                        "0.4",
                        "0.4",
                        "0.4",
                        "0.4"});
            table2.AddRow(new string[] {
                        "Low Mass Resolution",
                        "2.70",
                        "2.60",
                        "2.30",
                        "0.01"});
            table2.AddRow(new string[] {
                        "High Mass Resolution",
                        "27.50",
                        "26.50",
                        "3.50",
                        "0.01"});
            table2.AddRow(new string[] {
                        "Linearity",
                        "52.700",
                        "52.500",
                        "66.000",
                        "0.001"});
            table2.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "75.00",
                        "74.50",
                        "74.50",
                        "0.01"});
            table2.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "75.50",
                        "45.00",
                        "58.00",
                        "0.01"});
#line 101
 testRunner.Then(string.Format("each field has the following Default Value and Resolution for the Quad Mass {0}", quad), ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 03 - Default Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "<get>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "<get>")]
        public virtual void QUD_03_DefaultValues_ExampleSet0_Get()
        {
            this.QUD_03_DefaultValues("<get>", new string[] {
                        "InstrumentOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 03 - Default Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "3940")]
        public virtual void QUD_03_DefaultValues_ExampleSet1_3940()
        {
            this.QUD_03_DefaultValues("3940", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 03 - Default Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "8000")]
        public virtual void QUD_03_DefaultValues_ExampleSet2_8000()
        {
            this.QUD_03_DefaultValues("8000", new string[] {
                        "ignore",
                        "Obsolete",
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 03 - Default Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "32000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "32000")]
        public virtual void QUD_03_DefaultValues_ExampleSet2_32000()
        {
            this.QUD_03_DefaultValues("32000", new string[] {
                        "ignore",
                        "Obsolete",
                        "SimulatorOnly"});
        }
        
        public virtual void QUD_04_RecallSaveAndDefault(string quad, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest",
                    "MiniSmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 04 - Recall, Save and Default", @__tags);
#line 147
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 148
 testRunner.Given(string.Format("the quad is a {0}", quad), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
  testRunner.And("the browser is opened on the Quad Setup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table3.AddRow(new string[] {
                        "Low Mass Resolution",
                        "5.12"});
            table3.AddRow(new string[] {
                        "High Mass Resolution",
                        "5.86"});
            table3.AddRow(new string[] {
                        "Linearity",
                        "41.999"});
            table3.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "89.69"});
            table3.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "81.66"});
#line 150
  testRunner.And("all control parameters are set to", ((string)(null)), table3, "And ");
#line 157
 testRunner.When("I \'Save\' the Quad control parameter settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table4.AddRow(new string[] {
                        "Low Mass Resolution",
                        "4.36"});
            table4.AddRow(new string[] {
                        "High Mass Resolution",
                        "4.47"});
            table4.AddRow(new string[] {
                        "Linearity",
                        "38.500"});
            table4.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "90.90"});
            table4.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "71.50"});
#line 158
  testRunner.And("I change all the control parameters to", ((string)(null)), table4, "And ");
#line 165
 testRunner.When("I \'Recall\' the Quad control parameter settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table5.AddRow(new string[] {
                        "Low Mass Resolution",
                        "5.12"});
            table5.AddRow(new string[] {
                        "High Mass Resolution",
                        "5.86"});
            table5.AddRow(new string[] {
                        "Linearity",
                        "41.999"});
            table5.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "89.69"});
            table5.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "81.66"});
#line 166
 testRunner.Then("the control parameters are equal to", ((string)(null)), table5, "Then ");
#line 173
 testRunner.But("when I \'Default\' the Quad control parameter settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "3940 Default Value",
                        "8000 Default Value",
                        "32000 Default Value"});
            table6.AddRow(new string[] {
                        "Low Mass Resolution",
                        "2.70",
                        "2.60",
                        "2.30"});
            table6.AddRow(new string[] {
                        "High Mass Resolution",
                        "27.50",
                        "26.50",
                        "3.50"});
            table6.AddRow(new string[] {
                        "Linearity",
                        "52.700",
                        "52.500",
                        "66.000"});
            table6.AddRow(new string[] {
                        "Low Mass Scale Adjust",
                        "75.00",
                        "74.50",
                        "74.50"});
            table6.AddRow(new string[] {
                        "High Mass Scale Adjust",
                        "75.50",
                        "45.00",
                        "58.00"});
#line 174
 testRunner.Then(string.Format("the control parameters are equal to the following default values for the Quad Mas" +
                        "s {0}", quad), ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 04 - Recall, Save and Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MiniSmoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "<get>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "<get>")]
        public virtual void QUD_04_RecallSaveAndDefault_ExampleSet0_Get()
        {
            this.QUD_04_RecallSaveAndDefault("<get>", new string[] {
                        "InstrumentOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 04 - Recall, Save and Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MiniSmoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "3940")]
        public virtual void QUD_04_RecallSaveAndDefault_ExampleSet1_3940()
        {
            this.QUD_04_RecallSaveAndDefault("3940", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 04 - Recall, Save and Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MiniSmoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "8000")]
        public virtual void QUD_04_RecallSaveAndDefault_ExampleSet1_8000()
        {
            this.QUD_04_RecallSaveAndDefault("8000", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 04 - Recall, Save and Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MiniSmoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "32000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "32000")]
        public virtual void QUD_04_RecallSaveAndDefault_ExampleSet1_32000()
        {
            this.QUD_04_RecallSaveAndDefault("32000", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 05 - Displaying Peak Display Windows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_05_DisplayingPeakDisplayWindows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 05 - Displaying Peak Display Windows", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 200
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
 testRunner.When("I deselect quad \'Mass 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
  testRunner.And("I deselect quad \'Mass 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.Then("the \'Mass 1\' Peak Display graph is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
  testRunner.And("the \'Mass 3\' Peak Display graph is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
  testRunner.And("2 Peak Display graphs are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.When("I select quad \'Mass 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
  testRunner.Then("3 Peak Display graphs are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 06 - Displaying Peak Display Windows - ordering")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void QUD_06_DisplayingPeakDisplayWindows_Ordering()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 06 - Displaying Peak Display Windows - ordering", new string[] {
                        "ManualOnly",
                        "ignore"});
#line 218
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 219
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
  testRunner.And("the graphs are ordered left to right starting with \'Mass 1\' through to \'Mass 4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.And("each m/z axis correctly represents the Mass value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.When("I deselect quad \'Mass 1\' and \'Mass 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 224
 testRunner.Then("the \'Mass 1\' Peak Display graph is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 225
  testRunner.And("the the \'Mass 3\' Peak Display graph is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.When("I reselect quad \'Mass 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
 testRunner.Then("the \'Mass 3\' Peak Display graph is displayed as the middle of the 3 graphs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 229
  testRunner.And("each m/z axis correctly represents the Mass value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 07 - Remove All Peak Display Windows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_07_RemoveAllPeakDisplayWindows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 07 - Remove All Peak Display Windows", ((string[])(null)));
#line 233
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 234
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 235
 testRunner.When("I deselect quad \'Mass 1, Mass 2 and Mass 4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 236
 testRunner.Then("it is not possibe to deselect \'Mass 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 08 - Changing mass ion values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void QUD_08_ChangingMassIonValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 08 - Changing mass ion values", new string[] {
                        "ManualOnly",
                        "ignore"});
#line 241
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 242
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
 testRunner.When("I change all Mass values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
 testRunner.Then("the m/z axis for each Peak Display graph will correctly represent the new Mass va" +
                    "lue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void QUD_09_MassIonValuesValidation(string quad, string maximumMass, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ManualOnly",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 09 - Mass ion values validation", @__tags);
#line 249
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 250
 testRunner.Given(string.Format("the quad is a {0}", quad), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 251
  testRunner.And("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table7.AddRow(new string[] {
                        "0"});
            table7.AddRow(new string[] {
                        "-100"});
            table7.AddRow(new string[] {
                        "100000"});
            table7.AddRow(new string[] {
                        "abc"});
            table7.AddRow(new string[] {
                        "<blank>"});
#line 252
 testRunner.Then("the following values will not be accepted in either \'Mass 1\', \'Mass 2\', \'Mass 3\' " +
                    "or \'Mass 4\' parameters", ((string)(null)), table7, "Then ");
#line 259
  testRunner.And(string.Format("the maximum value accepted is {0}", maximumMass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
  testRunner.And("the Peak Displays will continue plotting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 09 - Mass ion values validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "4k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Maximum Mass", "3940")]
        public virtual void QUD_09_MassIonValuesValidation_4K()
        {
            this.QUD_09_MassIonValuesValidation("4k", "3940", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 09 - Mass ion values validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "8k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Maximum Mass", "8000")]
        public virtual void QUD_09_MassIonValuesValidation_8K()
        {
            this.QUD_09_MassIonValuesValidation("8k", "8000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 09 - Mass ion values validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "32k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "32k")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Maximum Mass", "32000")]
        public virtual void QUD_09_MassIonValuesValidation_32K()
        {
            this.QUD_09_MassIonValuesValidation("32k", "32000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 10 - Span options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_10_SpanOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 10 - Span options", ((string[])(null)));
#line 270
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table8.AddRow(new string[] {
                        "1"});
            table8.AddRow(new string[] {
                        "2"});
            table8.AddRow(new string[] {
                        "4"});
            table8.AddRow(new string[] {
                        "10"});
            table8.AddRow(new string[] {
                        "20"});
            table8.AddRow(new string[] {
                        "50"});
#line 271
 testRunner.Then("the \'Span\' parameter is available with the following dropdown options", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void QUD_11_ChangingSpanValue(string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ManualOnly",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 11 - Changing Span value", @__tags);
#line 284
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 285
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 286
 testRunner.When(string.Format("I change the Span to {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
 testRunner.Then("the m/z axis for each Peak Display graph will span this range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
  testRunner.And("the Peak Displays will continue plotting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "1")]
        public virtual void QUD_11_ChangingSpanValue_1()
        {
            this.QUD_11_ChangingSpanValue("1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "2")]
        public virtual void QUD_11_ChangingSpanValue_2()
        {
            this.QUD_11_ChangingSpanValue("2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "4")]
        public virtual void QUD_11_ChangingSpanValue_4()
        {
            this.QUD_11_ChangingSpanValue("4", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "10")]
        public virtual void QUD_11_ChangingSpanValue_10()
        {
            this.QUD_11_ChangingSpanValue("10", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "20")]
        public virtual void QUD_11_ChangingSpanValue_20()
        {
            this.QUD_11_ChangingSpanValue("20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 11 - Changing Span value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Value", "50")]
        public virtual void QUD_11_ChangingSpanValue_50()
        {
            this.QUD_11_ChangingSpanValue("50", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 12 - Changing Span - where mass is below minimum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void QUD_12_ChangingSpan_WhereMassIsBelowMinimum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 12 - Changing Span - where mass is below minimum", new string[] {
                        "ManualOnly",
                        "ignore"});
#line 304
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 305
 testRunner.Given("\'Detector Window\' is set to \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 306
  testRunner.And("\'Span\' is set to \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
  testRunner.And("\'Mass 1\' is set to \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.When("\'Span\' is changed to \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 309
 testRunner.Then("\'Mass 1\' will change to \'30\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
  testRunner.And("the Peak Displays will continue plotting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
  testRunner.And("the chart axis will look correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 13 - Number Of Steps options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_13_NumberOfStepsOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 13 - Number Of Steps options", ((string[])(null)));
#line 321
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table9.AddRow(new string[] {
                        "10"});
            table9.AddRow(new string[] {
                        "20"});
            table9.AddRow(new string[] {
                        "30"});
            table9.AddRow(new string[] {
                        "50"});
#line 322
 testRunner.Then("the \'Number of Steps\' parameter is available with the following dropdown options", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 14 - Time Per Second options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_14_TimePerSecondOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 14 - Time Per Second options", ((string[])(null)));
#line 336
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table10.AddRow(new string[] {
                        "0.023"});
            table10.AddRow(new string[] {
                        "0.04"});
            table10.AddRow(new string[] {
                        "0.06"});
            table10.AddRow(new string[] {
                        "0.1"});
#line 337
 testRunner.Then("the \'Time per second\' parameter is available with the following dropdown options", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 15 - Detector Window options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_15_DetectorWindowOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 15 - Detector Window options", ((string[])(null)));
#line 351
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table11.AddRow(new string[] {
                        "1"});
            table11.AddRow(new string[] {
                        "2"});
            table11.AddRow(new string[] {
                        "4"});
            table11.AddRow(new string[] {
                        "10"});
            table11.AddRow(new string[] {
                        "100"});
#line 352
 testRunner.Then("the \'Detector window\' parameter is available with the following dropdown options", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 16 - Mode and Polarity options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_16_ModeAndPolarityOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 16 - Mode and Polarity options", ((string[])(null)));
#line 363
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table12.AddRow(new string[] {
                        "Align"});
            table12.AddRow(new string[] {
                        "Normal"});
#line 364
 testRunner.Then("the \'Mode\' parameter is available with the following dropdown options", ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table13.AddRow(new string[] {
                        "Position1"});
            table13.AddRow(new string[] {
                        "Position2"});
#line 368
  testRunner.And("the \'Polarity\' parameter is available with the following dropdown options", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void QUD_17_QuadConfiguration_Align(string quad, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 17 - Quad Configuration - Align", exampleTags);
#line 377
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 378
 testRunner.Given(string.Format("the quad is a {0}", quad), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 379
  testRunner.And("the browser is opened on the Quad Setup page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
  testRunner.And("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.When("the Quad Mode parameter is set to \'Align\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 382
 testRunner.Then("the Rectified RF readback will stay the same over all scans within tolerance \'1.0" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 17 - Quad Configuration - Align")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "<get>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "<get>")]
        public virtual void QUD_17_QuadConfiguration_Align_ExampleSet0_Get()
        {
            this.QUD_17_QuadConfiguration_Align("<get>", new string[] {
                        "InstrumentOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 17 - Quad Configuration - Align")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "3940")]
        public virtual void QUD_17_QuadConfiguration_Align_ExampleSet1_3940()
        {
            this.QUD_17_QuadConfiguration_Align("3940", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 17 - Quad Configuration - Align")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "8000")]
        public virtual void QUD_17_QuadConfiguration_Align_ExampleSet1_8000()
        {
            this.QUD_17_QuadConfiguration_Align("8000", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 17 - Quad Configuration - Align")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "32000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quad", "32000")]
        public virtual void QUD_17_QuadConfiguration_Align_ExampleSet1_32000()
        {
            this.QUD_17_QuadConfiguration_Align("32000", new string[] {
                        "SimulatorOnly"});
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 18 - Quad Configuration - Normal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentOnly")]
        public virtual void QUD_18_QuadConfiguration_Normal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 18 - Quad Configuration - Normal", new string[] {
                        "InstrumentOnly"});
#line 399
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 400
 testRunner.Given("all 4 masses are selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 401
 testRunner.When("the Quad Mode parameter is set to \'Normal\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
 testRunner.Then("the Rectified RF readback will vary over all scans", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("QUD - 19 - Quad Setup Mode - ADC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - QuadSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("QuadSetup")]
        public virtual void QUD_19_QuadSetupMode_ADC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUD - 19 - Quad Setup Mode - ADC", ((string[])(null)));
#line 405
this.ScenarioSetup(scenarioInfo);
#line 65
this.FeatureBackground();
#line 406
 testRunner.Then("the ADC frequency will be 3600 MHz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
