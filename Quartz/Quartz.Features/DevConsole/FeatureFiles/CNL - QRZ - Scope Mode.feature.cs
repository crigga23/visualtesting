// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.DevConsole.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CNL_QRZ_ScopeModeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CNL - QRZ - Scope Mode.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CNL - QRZ - Scope Mode", "In order to run in Scope Mode\r\nI want to be able to access a Scope Mode page wher" +
                    "e I have the ability to see a plot for a specific Mass and Span and have easy ac" +
                    "cess to ADC\r\nparameters that will allow me to set the instrument up in this mode" +
                    ".", ProgrammingLanguage.CSharp, new string[] {
                        "ScopeMode"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "CNL - QRZ - Scope Mode")))
            {
                Quartz.Features.DevConsole.FeatureFiles.CNL_QRZ_ScopeModeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-01 - Scope Mode Plot - Basic Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        public virtual void CNL_ScopeMode_01_ScopeModePlot_BasicParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-01 - Scope Mode Plot - Basic Parameters", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameters",
                        "Type"});
            table1.AddRow(new string[] {
                        "Mass",
                        "Numeric"});
            table1.AddRow(new string[] {
                        "Span",
                        "Numeric"});
#line 79
testRunner.Then("the following text parameters with a specific type will be available", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-02 - Scope Mode Plot - Parameters (Default and Resolution)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MiniSmoke")]
        public virtual void CNL_ScopeMode_02_ScopeModePlot_ParametersDefaultAndResolution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-02 - Scope Mode Plot - Parameters (Default and Resolution)", new string[] {
                        "MiniSmoke"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
testRunner.Given("I restart Quartz and Typhoon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
 testRunner.And("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scope Mode Settings",
                        "Default",
                        "Resolution (dp)"});
            table2.AddRow(new string[] {
                        "Mass",
                        "550",
                        "0"});
            table2.AddRow(new string[] {
                        "Span",
                        "50",
                        "0"});
#line 89
testRunner.Then("the following Scope Mode settings have these default values with defined resoluti" +
                    "ons (dp)", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void CNL_ScopeMode_03_ScopeModePlot_MassMinMax(string span, string mass, string allowed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-03 - Scope Mode Plot - Mass (Min / Max)", exampleTags);
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("the Mass is set to \'550\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And(string.Format("the Span is set to \'{0}\'", span), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
testRunner.Then(string.Format("the \'Mass\' value \'{0}\' is allowed or disallowed {1}", mass, allowed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-03 - Scope Mode Plot - Mass (Min / Max)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "14000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_03_ScopeModePlot_MassMinMax_Variant0()
        {
            this.CNL_ScopeMode_03_ScopeModePlot_MassMinMax("50", "14000", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-03 - Scope Mode Plot - Mass (Min / Max)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "14001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_03_ScopeModePlot_MassMinMax_Variant1()
        {
            this.CNL_ScopeMode_03_ScopeModePlot_MassMinMax("50", "14001", "No", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-03 - Scope Mode Plot - Mass (Min / Max)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_03_ScopeModePlot_MassMinMax_Variant2()
        {
            this.CNL_ScopeMode_03_ScopeModePlot_MassMinMax("2", "2", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-03 - Scope Mode Plot - Mass (Min / Max)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_03_ScopeModePlot_MassMinMax_Variant3()
        {
            this.CNL_ScopeMode_03_ScopeModePlot_MassMinMax("2", "1", "No", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-04 - Scope Mode Plot - Span (Min / Max)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        public virtual void CNL_ScopeMode_04_ScopeModePlot_SpanMinMax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-04 - Scope Mode Plot - Span (Min / Max)", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 109
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.And("the Mass is set to \'14000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Span",
                        "Allowed"});
            table3.AddRow(new string[] {
                        "14000",
                        "Yes"});
            table3.AddRow(new string[] {
                        "14001",
                        "No"});
            table3.AddRow(new string[] {
                        "2",
                        "Yes"});
            table3.AddRow(new string[] {
                        "1",
                        "No"});
#line 111
testRunner.Then("the following Span values are allowed or disallowed", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void CNL_ScopeMode_05_ScopeModePlot_SpanDependancy(string mass, string span, string allowed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-05 - Scope Mode Plot - Span Dependancy", exampleTags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
 testRunner.And("the Span is set to \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("the Mass is set to \'550\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
testRunner.When(string.Format("the Mass is set to \'{0}\'", mass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
testRunner.Then(string.Format("the \'Span\' value \'{0}\' is allowed or disallowed {1}", span, allowed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-05 - Scope Mode Plot - Span Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "550")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "1100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_05_ScopeModePlot_SpanDependancy_Variant0()
        {
            this.CNL_ScopeMode_05_ScopeModePlot_SpanDependancy("550", "1100", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-05 - Scope Mode Plot - Span Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "550")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "1101")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_05_ScopeModePlot_SpanDependancy_Variant1()
        {
            this.CNL_ScopeMode_05_ScopeModePlot_SpanDependancy("550", "1101", "No", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-05 - Scope Mode Plot - Span Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "6000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "12000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_05_ScopeModePlot_SpanDependancy_Variant2()
        {
            this.CNL_ScopeMode_05_ScopeModePlot_SpanDependancy("6000", "12000", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-05 - Scope Mode Plot - Span Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "6000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "12001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_05_ScopeModePlot_SpanDependancy_Variant3()
        {
            this.CNL_ScopeMode_05_ScopeModePlot_SpanDependancy("6000", "12001", "No", ((string[])(null)));
        }
        
        public virtual void CNL_ScopeMode_06_ScopeModePlot_MassDependancy(string span, string mass, string allowed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-06 - Scope Mode Plot - Mass Dependancy", exampleTags);
#line 134
this.ScenarioSetup(scenarioInfo);
#line 135
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
 testRunner.And("the Span is set to \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.And("the Mass is set to \'550\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
testRunner.When(string.Format("the Span is set to \'{0}\'", span), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
testRunner.Then(string.Format("the \'Mass\' value \'{0}\' is allowed or disallowed {1}", mass, allowed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-06 - Scope Mode Plot - Mass Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "250")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_06_ScopeModePlot_MassDependancy_Variant0()
        {
            this.CNL_ScopeMode_06_ScopeModePlot_MassDependancy("500", "250", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-06 - Scope Mode Plot - Mass Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "249")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_06_ScopeModePlot_MassDependancy_Variant1()
        {
            this.CNL_ScopeMode_06_ScopeModePlot_MassDependancy("500", "249", "No", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-06 - Scope Mode Plot - Mass Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "1100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "Yes")]
        public virtual void CNL_ScopeMode_06_ScopeModePlot_MassDependancy_Variant2()
        {
            this.CNL_ScopeMode_06_ScopeModePlot_MassDependancy("1100", "600", "Yes", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-06 - Scope Mode Plot - Mass Dependancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Span", "1100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mass", "549")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Allowed", "No")]
        public virtual void CNL_ScopeMode_06_ScopeModePlot_MassDependancy_Variant3()
        {
            this.CNL_ScopeMode_06_ScopeModePlot_MassDependancy("1100", "549", "No", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-07 - Scope Mode Plot - Axes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void CNL_ScopeMode_07_ScopeModePlot_Axes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-07 - Scope Mode Plot - Axes", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 151
this.ScenarioSetup(scenarioInfo);
#line 152
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Axis",
                        "Description"});
            table4.AddRow(new string[] {
                        "x",
                        "Mass m/z"});
            table4.AddRow(new string[] {
                        "y",
                        "Intensity (ADC response)"});
#line 153
testRunner.Then("a plot will be available with the following \'Axis\' that has an associated static " +
                    "\'Description\'", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-08 - Scope Mode Plot - Parameters Affecting X-Axis Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void CNL_ScopeMode_08_ScopeModePlot_ParametersAffectingX_AxisRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-08 - Scope Mode Plot - Parameters Affecting X-Axis Range", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
testRunner.When("the \'Mass\' and \'Span\' values are set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mass",
                        "Span",
                        "Min",
                        "Max"});
            table5.AddRow(new string[] {
                        "550",
                        "50",
                        "525",
                        "575"});
            table5.AddRow(new string[] {
                        "550",
                        "100",
                        "500",
                        "600"});
            table5.AddRow(new string[] {
                        "2",
                        "2",
                        "1",
                        "3"});
            table5.AddRow(new string[] {
                        "7000",
                        "14000",
                        "0",
                        "14000"});
#line 163
testRunner.Then("the x-Axis will show the following \'Min\' and \'Max\' m/z range", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void CNL_ScopeMode_09_ScopeModePlot_LivePeaks(string inputChannel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "ManualOnly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-09 - Scope Mode Plot - Live Peaks", @__tags);
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given("Fluidics infusion has been stopped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
  testRunner.And("Tuning has been Aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tab",
                        "Parameters",
                        "Value"});
            table6.AddRow(new string[] {
                        "Instrument",
                        "Ion Energy",
                        "-5"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "Input Channel",
                        string.Format("{0}", inputChannel)});
            table6.AddRow(new string[] {
                        "ADC2",
                        "DC Bias A",
                        "0"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "DC Bias B",
                        "0"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "Amplitude Threshold A",
                        "0"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "Amplitude Threshold B",
                        "0"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "Area Threshold A",
                        "0"});
            table6.AddRow(new string[] {
                        "ADC2",
                        "Area Threshold B",
                        "0"});
#line 175
  testRunner.And("the following Tune page \'Tab\' \'Parameters\' have been set to a specific \'Value\'", ((string)(null)), table6, "And ");
#line 185
 testRunner.When("Scope Mode is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("a baseline noise trace should be visable within the Scope Mode plot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-09 - Scope Mode Plot - Live Peaks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input Channel", "A")]
        public virtual void CNL_ScopeMode_09_ScopeModePlot_LivePeaks_A()
        {
            this.CNL_ScopeMode_09_ScopeModePlot_LivePeaks("A", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-09 - Scope Mode Plot - Live Peaks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "B")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input Channel", "B")]
        public virtual void CNL_ScopeMode_09_ScopeModePlot_LivePeaks_B()
        {
            this.CNL_ScopeMode_09_ScopeModePlot_LivePeaks("B", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-09 - Scope Mode Plot - Live Peaks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Dual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Input Channel", "Dual")]
        public virtual void CNL_ScopeMode_09_ScopeModePlot_LivePeaks_Dual()
        {
            this.CNL_ScopeMode_09_ScopeModePlot_LivePeaks("Dual", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-10 - Scope Mode Plot - Zoom has no Effect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void CNL_ScopeMode_10_ScopeModePlot_ZoomHasNoEffect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-10 - Scope Mode Plot - Zoom has no Effect", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 196
this.ScenarioSetup(scenarioInfo);
#line 197
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 198
testRunner.When("an attempt is made to Zoom into the Scope Mode plot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 199
testRunner.Then("zooming will not occur on either axis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-11 - Scope Mode Control Tabs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        public virtual void CNL_ScopeMode_11_ScopeModeControlTabs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-11 - Scope Mode Control Tabs", ((string[])(null)));
#line 201
this.ScenarioSetup(scenarioInfo);
#line 202
testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 203
testRunner.Then("they will be filtered to show only the \'ADC2\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CNL-ScopeMode-12 - Scope Mode Control - ADC Tab Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CNL - QRZ - Scope Mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ScopeMode")]
        public virtual void CNL_ScopeMode_12_ScopeModeControl_ADCTabParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CNL-ScopeMode-12 - Scope Mode Control - ADC Tab Parameters", ((string[])(null)));
#line 205
this.ScenarioSetup(scenarioInfo);
#line 206
 testRunner.Given("the \'Scope Mode\' page has been accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameters",
                        "Type"});
            table7.AddRow(new string[] {
                        "DC Bias A",
                        "Decimal"});
            table7.AddRow(new string[] {
                        "Amplitude Threshold A",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Area Threshold A",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Baseline Mean A",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "DC Bias B",
                        "Decimal"});
            table7.AddRow(new string[] {
                        "Amplitude Threshold B",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Area Threshold B",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Baseline Mean B",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Time Delay B",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Channel B Multiplier",
                        "Decimal"});
            table7.AddRow(new string[] {
                        "Trigger Threshold",
                        "Decimal"});
            table7.AddRow(new string[] {
                        "Output Scaling Factor",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Average Single Ion Intensity",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Measured m/z",
                        "Decimal"});
            table7.AddRow(new string[] {
                        "Measured charge",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "T0 (ns)",
                        "Numeric"});
            table7.AddRow(new string[] {
                        "Veff (V)",
                        "Numeric"});
#line 207
 testRunner.Then("the following text parameters with a specific type will be available", ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameters",
                        "Options"});
            table8.AddRow(new string[] {
                        "ADC Algorithm",
                        "ADC, Avg, TDC, PkDet TDC"});
            table8.AddRow(new string[] {
                        "Input Channel",
                        "A, B, Dual"});
            table8.AddRow(new string[] {
                        "Signal Source",
                        "Detector, Test signal"});
            table8.AddRow(new string[] {
                        "Pulse Shaping",
                        "OFF, ON"});
#line 226
  testRunner.And("the following dropdown parameters with specific options will be available", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
