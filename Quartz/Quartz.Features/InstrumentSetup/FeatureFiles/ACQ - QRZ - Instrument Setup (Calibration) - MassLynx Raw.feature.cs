// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.InstrumentSetup.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class InstrumentSetupCalibration_MassLynxRawFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ACQ - QRZ - Instrument Setup (Calibration) - MassLynx Raw.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Instrument Setup (Calibration) - MassLynx Raw", "In order to acquire multi function methods and have each function calibrated prop" +
                    "erly\r\nI want to be able to check the calibration used for each method function\r\n" +
                    "So that I can compare this with a set of MS Method baselines slot calibrations", ProgrammingLanguage.CSharp, new string[] {
                        "CR_feature_needs_refactor",
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Instrument Setup (Calibration) - MassLynx Raw")))
            {
                Quartz.Features.InstrumentSetup.FeatureFiles.InstrumentSetupCalibration_MassLynxRawFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 48
#line 49
 testRunner.Given("I have set positive and negative ADC values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
  testRunner.And("the Instrument Setup page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("all toggles are set to OFF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mass",
                        "POS RES",
                        "NEG RES",
                        "POS SENS",
                        "NEG SENS"});
            table1.AddRow(new string[] {
                        "Mass Calibration 600",
                        "",
                        "X",
                        "X",
                        ""});
            table1.AddRow(new string[] {
                        "Mass Calibration 1200",
                        "X",
                        "X",
                        "X",
                        "X"});
            table1.AddRow(new string[] {
                        "Mass Calibration 2000",
                        "X",
                        "",
                        "X",
                        ""});
            table1.AddRow(new string[] {
                        "Mass Calibration 5000",
                        "X",
                        "",
                        "X",
                        ""});
            table1.AddRow(new string[] {
                        "Mass Calibration 8000",
                        "X",
                        "X",
                        "",
                        "X"});
#line 52
  testRunner.And("Instrument Setup Calibration has been run successfully for the following \'X\' slot" +
                    "s", ((string)(null)), table1, "And ");
#line 62
  testRunner.And("a baseline MS Method acquisition has been run to determine / record the calibrati" +
                    "on polynomials for each \'X\' slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
  testRunner.And("none of the \'X\' slot polynomials are zero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate(string methodType, string lockMass1, string lockMass2, string lowMass, string highMass, string polarity, string mode, string slotCalibrationUsed, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "Obsolete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
                    "n Create", @__tags);
#line 71
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line 72
  testRunner.Given(string.Format("a new Acquisition Method \'{0}\' is created using Acquisition Create", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
   testRunner.And(string.Format("the method has a short Run Duration with Low Mass {0}, High Mass {1}, Lock Mass 1" +
                        " {2} and Lock Mass 2 {3} parameters set", lowMass, highMass, lockMass1, lockMass2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
   testRunner.And("the Method is Saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
   testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.When("this Method is run using Acquisition \'Record\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
   testRunner.And("the acquisition runs to completion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.Then(string.Format("these new polynomials will exactly match the \'baseline\' polynomials for the {0}", slotCalibrationUsed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 8000,  2: POS RES 8000")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSe()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe", "N/A", "N/A", "5000", "8000", "Positive", "Resolution", "1: POS RES 8000,  2: POS RES 8000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 5000, 2: POS SENS 5000, 3: POS SENS 5000")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSeSingleLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe + Single LM", "556.27", "N/A", "100", "5000", "Positive", "Sensitivity", "1: POS SENS 5000, 2: POS SENS 5000, 3: POS SENS 5000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 600,   2: NEG RES 600  , 3: NEG RES 600")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSeDualLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe + Dual LM", "556.27", "278.1", "100", "600", "Negative", "Resolution", "1: NEG RES 600,   2: NEG RES 600  , 3: NEG RES 600", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 8000, 2: NEG SENS 8000")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSe()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe", "N/A", "N/A", "5000", "8000", "Negative", "Sensitivity", "1: NEG SENS 8000, 2: NEG SENS 8000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSeSingleLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe + Single LM", "556.27", "N/A", "100", "2000", "Positive", "Resolution", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 600 , 2: POS SENS 600 , 3: POS SENS 600")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSeDualLM()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe + Dual LM", "556.27", "278.1", "100", "600", "Positive", "Sensitivity", "1: POS SENS 600 , 2: POS SENS 600 , 3: POS SENS 600", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisitio" +
            "n Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods - No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: None (N/A),  2: None (N/A)")]
        public virtual void ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_NoCalibration_MSe()
        {
            this.ACQ_01_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe", "N/A", "N/A", "50", "500", "Positive", "Resolution", "1: None (N/A),  2: None (N/A)", ((string[])(null)));
        }
        
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate(string testName, string methodType, string lockMass1, string lockMass2, string lowMass, string highMass, string polarity, string mode, string slotCalibrationUsed, string methodName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
                    "on Create", exampleTags);
#line 103
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line 104
  testRunner.Given(string.Format("a new Acquisition Method \'{0}\' XML file is created called \'{1}\'", methodType, methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 8000,  2: POS RES 8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSe()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe", "MSe", "N/A", "N/A", "5000", "8000", "Positive", "Resolution", "1: POS RES 8000,  2: POS RES 8000", "Automation_MultiFunctionAcquisition_MSe.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 5000, 2: POS SENS 5000, 3: POS SENS 5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_SingleLockMass.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSeSingleLM()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe + Single LM", "MSe", "556.27", "N/A", "100", "5000", "Positive", "Sensitivity", "1: POS SENS 5000, 2: POS SENS 5000, 3: POS SENS 5000", "Automation_MultiFunctionAcquisition_MSe_SingleLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 600,   2: NEG RES 600  , 3: NEG RES 600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_DualLockMass.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_MSeDualLM()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe + Dual LM", "MSe", "556.27", "278.1", "100", "600", "Negative", "Resolution", "1: NEG RES 600,   2: NEG RES 600  , 3: NEG RES 600", "Automation_MultiFunctionAcquisition_MSe_DualLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "5000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 8000, 2: NEG SENS 8000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSe()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe", "HDMSe", "N/A", "N/A", "5000", "8000", "Negative", "Sensitivity", "1: NEG SENS 8000, 2: NEG SENS 8000", "Automation_MultiFunctionAcquisition_HDMSe.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe + Single LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe_SingleLockMass.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSeSingleLM()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe + Single LM", "HDMSe", "556.27", "N/A", "100", "2000", "Positive", "Resolution", "1: POS RES  2000, 2: POS RES  2000, 3: POS RES 2000", "Automation_MultiFunctionAcquisition_HDMSe_SingleLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "HD-MSe + Dual LM")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "HDMSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 600 , 2: POS SENS 600 , 3: POS SENS 600")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_HDMSe_DualLockMass.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_HD_MSeDualLM()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("HD-MSe + Dual LM", "HDMSe", "556.27", "278.1", "100", "600", "Positive", "Sensitivity", "1: POS SENS 600 , 2: POS SENS 600 , 3: POS SENS 600", "Automation_MultiFunctionAcquisition_HDMSe_DualLockMass.xml", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-01b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Acquisiti" +
            "on Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "MSe Methods - No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSe + No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "MSe + No Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Type", "MSe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Low Mass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:High Mass", "500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: None (N/A),  2: None (N/A)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "Automation_MultiFunctionAcquisition_MSe_NoCalibration.xml")]
        public virtual void ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate_MSeMethods_NoCalibration_MSeNoCalibration()
        {
            this.ACQ_01B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingAcquisitionCreate("MSe + No Calibration", "MSe", "N/A", "N/A", "50", "500", "Positive", "Resolution", "1: None (N/A),  2: None (N/A)", "Automation_MultiFunctionAcquisition_MSe_NoCalibration.xml", ((string[])(null)));
        }
        
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing(string methodName, string lockMass1, string lockMass2, string startMass, string endMass, string polarity, string mode, string slotCalibrationUsed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
                    "e (Pre-existing)", exampleTags);
#line 135
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line 136
  testRunner.Given(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
   testRunner.And(string.Format("a new \'{0}\' is selected to be run via Acquisition | Custom Tune XML", methodName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
   testRunner.And("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 1200,  2: POS RES 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_Mse_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("mse.xml", "N/A", "N/A", "100", "1200", "Positive", "Resolution", "1: POS RES 1200,  2: POS RES 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse_fullhd.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse_fullhd.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 1200, 2: POS SENS 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_Mse_Fullhd_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("mse_fullhd.xml", "N/A", "N/A", "100", "1200", "Positive", "Sensitivity", "1: POS SENS 1200, 2: POS SENS 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "mse_trend")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "mse_trend")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 1200,  2: NEG RES 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_Mse_Trend()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("mse_trend", "N/A", "N/A", "100", "1200", "Negative", "Resolution", "1: NEG RES 1200,  2: NEG RES 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ms_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "ms_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 1200, 2: NEG SENS 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_Ms_Lockmass_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("ms_lockmass.xml", "556.27", "N/A", "100", "1200", "Negative", "Sensitivity", "1: NEG SENS 1200, 2: NEG SENS 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ms_dual_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "ms_dual_lockmass.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "556.27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "278.1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS RES 1200,  2: POS RES 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_Ms_Dual_Lockmass_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("ms_dual_lockmass.xml", "556.27", "278.1", "100", "1200", "Positive", "Resolution", "1: POS RES 1200,  2: POS RES 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TofMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "TofMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: POS SENS 1200, 2: POS SENS 1200, 3: POS SENS 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_TofMRM_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("TofMRM.xml", "N/A", "N/A", "50", "1200", "Positive", "Sensitivity", "1: POS SENS 1200, 2: POS SENS 1200, 3: POS SENS 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HDMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "HDMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG RES 1200,  2: NEG RES 1200,  3: NEG RES 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_HDMRM_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("HDMRM.xml", "N/A", "N/A", "50", "1200", "Negative", "Resolution", "1: NEG RES 1200,  2: NEG RES 1200,  3: NEG RES 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-02 - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tun" +
            "e (Pre-existing)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "HSMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method Name", "HSMRM.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 1", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LockMass 2", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:StartMass", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EndMass", "1200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Slot Calibration Used", "1: NEG SENS 1200, 2: NEG SENS 1200, 3: NEG SENS 1200")]
        public virtual void ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing_HSMRM_Xml()
        {
            this.ACQ_02_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTunePre_Existing("HSMRM.xml", "N/A", "N/A", "50", "1200", "Negative", "Sensitivity", "1: NEG SENS 1200, 2: NEG SENS 1200, 3: NEG SENS 1200", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03a - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
            "ne (Multi Function Methods - Manually Created MS) - 8 Functions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_03A_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTuneMultiFunctionMethods_ManuallyCreatedMS_8Functions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-03a - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
                    "ne (Multi Function Methods - Manually Created MS) - 8 Functions", ((string[])(null)));
#line 197
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table2.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "500"});
            table2.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "501",
                        "1000"});
            table2.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "1001",
                        "2000"});
            table2.AddRow(new string[] {
                        "4",
                        "MS",
                        "N/A",
                        "N/A",
                        "2001",
                        "5000"});
            table2.AddRow(new string[] {
                        "5",
                        "MS",
                        "N/A",
                        "N/A",
                        "5001",
                        "8000"});
            table2.AddRow(new string[] {
                        "6",
                        "MS",
                        "N/A",
                        "N/A",
                        "8001",
                        "14000"});
            table2.AddRow(new string[] {
                        "7",
                        "MS",
                        "N/A",
                        "N/A",
                        "14001",
                        "32000"});
            table2.AddRow(new string[] {
                        "8",
                        "MS",
                        "N/A",
                        "N/A",
                        "32001",
                        "70000"});
#line 198
  testRunner.Given("a new \'MS_8Functions.xml\' XML file is manually created and saved with the followi" +
                    "ng functions", ((string)(null)), table2, "Given ");
#line 208
   testRunner.And("the mode is Resolution and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
   testRunner.And("\'MS_8Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table3.AddRow(new string[] {
                        "1: POS RES 70000"});
            table3.AddRow(new string[] {
                        "2: POS RES 70000"});
            table3.AddRow(new string[] {
                        "3: POS RES 70000"});
            table3.AddRow(new string[] {
                        "4: POS RES 70000"});
            table3.AddRow(new string[] {
                        "5: POS RES 70000"});
            table3.AddRow(new string[] {
                        "6: POS RES 70000"});
            table3.AddRow(new string[] {
                        "7: POS RES 70000"});
            table3.AddRow(new string[] {
                        "8: POS RES 70000"});
#line 213
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
            "ne (Multi Function Methods - Manually Created MS)\t- 3 functions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_03B_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTuneMultiFunctionMethods_ManuallyCreatedMS_3Functions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-03b - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
                    "ne (Multi Function Methods - Manually Created MS)\t- 3 functions", ((string[])(null)));
#line 226
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table4.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "500"});
            table4.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "1000"});
            table4.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "2000"});
#line 227
  testRunner.Given("a new \'MS_3Functions.xml\' XML file is manually created and saved with the followi" +
                    "ng functions", ((string)(null)), table4, "Given ");
#line 232
   testRunner.And("the mode is Sensitivity and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
   testRunner.And("\'MS_3Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table5.AddRow(new string[] {
                        "1: POS SENS 2000"});
            table5.AddRow(new string[] {
                        "2: POS SENS 2000"});
            table5.AddRow(new string[] {
                        "3: POS SENS 2000"});
#line 237
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03c - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
            "ne (Multi Function Methods - Manually Created MS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_03C_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTuneMultiFunctionMethods_ManuallyCreatedMS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-03c - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
                    "ne (Multi Function Methods - Manually Created MS", ((string[])(null)));
#line 245
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table6.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "500"});
            table6.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "7900"});
            table6.AddRow(new string[] {
                        "3",
                        "LockMass",
                        "556.27",
                        "N/A",
                        "N/A",
                        "N/A"});
#line 246
  testRunner.Given("a new \'MS_2Functions_SingleLockMass.xml\' XML file is manually created and saved w" +
                    "ith the following functions", ((string)(null)), table6, "Given ");
#line 251
   testRunner.And("the mode is Resolution and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
   testRunner.And("\'MS_2Functions_SingleLockMass.xml\' is selected to be run via Acquisition | Custom" +
                    " Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table7.AddRow(new string[] {
                        "1: NEG RES 8000"});
            table7.AddRow(new string[] {
                        "2: NEG RES 8000"});
            table7.AddRow(new string[] {
                        "3: NEG RES 8000"});
#line 256
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-03d - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
            "ne (Multi Function Methods - Manually Created MS) - No Appropriate Calibration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_03D_InstrumentSetupMultiFunctionAcquisition_DataAcquiredUsingCustomTuneMultiFunctionMethods_ManuallyCreatedMS_NoAppropriateCalibration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-03d - InstrumentSetupMultiFunctionAcquisition - Data Acquired Using Custom Tu" +
                    "ne (Multi Function Methods - Manually Created MS) - No Appropriate Calibration", ((string[])(null)));
#line 264
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass"});
            table8.AddRow(new string[] {
                        "1",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "5000"});
            table8.AddRow(new string[] {
                        "2",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "14000"});
            table8.AddRow(new string[] {
                        "3",
                        "MS",
                        "N/A",
                        "N/A",
                        "50",
                        "70000"});
#line 265
  testRunner.Given("a new \'MS_3Functions_NoCalibration.xml\' XML file is manually created and saved wi" +
                    "th the following functions", ((string)(null)), table8, "Given ");
#line 270
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
   testRunner.And("\'MS_3Functions_NoCalibration.xml\' is selected to be run via Acquisition | Custom " +
                    "Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table9.AddRow(new string[] {
                        "1: None (N/A)"});
            table9.AddRow(new string[] {
                        "2: None (N/A)"});
            table9.AddRow(new string[] {
                        "3: None (N/A)"});
#line 275
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-04a - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
            "ng (Multi Function Methods - Manually Created MRM)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_04A_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsingMultiFunctionMethods_ManuallyCreatedMRM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-04a - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
                    "ng (Multi Function Methods - Manually Created MRM)", ((string[])(null)));
#line 315
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table10.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "500",
                        "430.9"});
            table10.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "501",
                        "1000",
                        "566.9"});
            table10.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "1001",
                        "2000",
                        "1042.8"});
            table10.AddRow(new string[] {
                        "4",
                        "MRM",
                        "N/A",
                        "N/A",
                        "2001",
                        "5000",
                        "2062.6"});
#line 316
  testRunner.Given("a new \'MRM_4Functions.xml\' XML file is manually created and saved with the follow" +
                    "ing functions", ((string)(null)), table10, "Given ");
#line 322
   testRunner.And("the mode is Resolution and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
   testRunner.And("\'MRM_4Functions.xml\' is selected to be run via Acquisition | Custom Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table11.AddRow(new string[] {
                        "1: POS RES 5000"});
            table11.AddRow(new string[] {
                        "2: POS RES 5000"});
            table11.AddRow(new string[] {
                        "3: POS RES 5000"});
            table11.AddRow(new string[] {
                        "4: POS RES 5000"});
#line 327
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-04b - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
            "ng (Multi Function Methods - Manually Created MRM)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_04B_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsingMultiFunctionMethods_ManuallyCreatedMRM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-04b - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
                    "ng (Multi Function Methods - Manually Created MRM)", ((string[])(null)));
#line 336
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table12.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "500",
                        "452.9"});
            table12.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "32000",
                        "2900.5"});
            table12.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "2000",
                        "1268.8"});
            table12.AddRow(new string[] {
                        "4",
                        "LockMass",
                        "556.27",
                        "278.1",
                        "N/A",
                        "N/A",
                        "N/A"});
#line 337
  testRunner.Given("a new \'MRM_3Functions_DualLockMass.xml\' XML file is manually created and saved wi" +
                    "th the following functions", ((string)(null)), table12, "Given ");
#line 343
   testRunner.And("the mode is Sensitivity and the polarity is Negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
   testRunner.And("\'MRM_3Functions_DualLockMass.xml\' is selected to be run via Acquisition | Custom " +
                    "Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table13.AddRow(new string[] {
                        "1: POS SENS 32000"});
            table13.AddRow(new string[] {
                        "2: POS SENS 32000"});
            table13.AddRow(new string[] {
                        "3: POS SENS 32000"});
            table13.AddRow(new string[] {
                        "4: POS SENS 32000"});
#line 348
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ACQ-04c - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
            "ng (Multi Function Methods - Manually Created MRM)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Instrument Setup (Calibration) - MassLynx Raw")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_feature_needs_refactor")]
        public virtual void ACQ_04C_InstrumentSetupMultiFunctionAcquisition_CustomTuneDataAcquiredUsingMultiFunctionMethods_ManuallyCreatedMRM()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ACQ-04c - InstrumentSetupMultiFunctionAcquisition - Custom Tune Data Acquired Usi" +
                    "ng (Multi Function Methods - Manually Created MRM)", ((string[])(null)));
#line 357
 this.ScenarioSetup(scenarioInfo);
#line 48
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions",
                        "Type",
                        "LockMass 1",
                        "LockMass 2",
                        "StartMass",
                        "EndMass",
                        "SetMass"});
            table14.AddRow(new string[] {
                        "1",
                        "MRM",
                        "N/A",
                        "N/A",
                        "50",
                        "2500",
                        "430.9"});
            table14.AddRow(new string[] {
                        "2",
                        "MRM",
                        "N/A",
                        "N/A",
                        "501",
                        "3000",
                        "566.9"});
            table14.AddRow(new string[] {
                        "3",
                        "MRM",
                        "N/A",
                        "N/A",
                        "1001",
                        "5000",
                        "1042.8"});
            table14.AddRow(new string[] {
                        "4",
                        "MRM",
                        "N/A",
                        "N/A",
                        "2001",
                        "8000",
                        "2062.6"});
#line 358
  testRunner.Given("a new \'MRM_4Functions_NoCalibration.xml\' XML file is manually created and saved w" +
                    "ith the following functions", ((string)(null)), table14, "Given ");
#line 364
   testRunner.And("the mode is Sensitivity and the polarity is Positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
   testRunner.And("\'MRM_4Functions_NoCalibration.xml\' is selected to be run via Acquisition | Custom" +
                    " Tune XML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
   testRunner.And("during the method run an acquisition is \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 367
   testRunner.And("the acquisition is Stopped after \'10\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
   testRunner.And("the calibration polynomials in the new acquisition .RAW folder \'_header.txt\' file" +
                    " are determined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Slot Calibration Used"});
            table15.AddRow(new string[] {
                        "1: None (N/A)"});
            table15.AddRow(new string[] {
                        "2: None (N/A)"});
            table15.AddRow(new string[] {
                        "3: None (N/A)"});
            table15.AddRow(new string[] {
                        "4: None (N/A)"});
#line 369
  testRunner.Then("these new polynomials will exactly match the \'baseline\' polynomials for the <Slot" +
                    " Calibration Used>", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
