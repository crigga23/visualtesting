// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.InstrumentSetup.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class ISP_InstrumentSetupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QRZ-InsrumentSetupGUI.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ISP-InstrumentSetup", "In order to calibrate the instrument based on set of value for polarity and optic" +
                    "al mode\r\nAnd setting such as Detector setup, Quad calibration, CCS calibration e" +
                    "tc", ProgrammingLanguage.CSharp, new string[] {
                        "ignore",
                        "Defect",
                        "InstrumentSetup"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ISP-InstrumentSetup")))
            {
                Quartz.Features.InstrumentSetup.FeatureFiles.ISP_InstrumentSetupFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 40
#line 41
 testRunner.Given("that a Quartz Development Console environment is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("the Instrument setup page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-01 - Instrument Setup - Instrument Setup page Availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        public virtual void ISP_01_InstrumentSetup_InstrumentSetupPageAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-01 - Instrument Setup - Instrument Setup page Availability", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Panels"});
            table1.AddRow(new string[] {
                        "Detector Setup, Quad, CCS and Lock CCS Calibration"});
            table1.AddRow(new string[] {
                        "Resolution optimisation and Mass Calibration"});
#line 48
 testRunner.Then("the following panels are displayed", ((string)(null)), table1, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Controls"});
            table2.AddRow(new string[] {
                        "Progress Status"});
            table2.AddRow(new string[] {
                        "Progress Bar"});
            table2.AddRow(new string[] {
                        "Run Button"});
            table2.AddRow(new string[] {
                        "Cancel Button"});
#line 52
 testRunner.And("following controls are available", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-02 - Instrument Setup - Instrument Setup options - Default settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        public virtual void ISP_02_InstrumentSetup_InstrumentSetupOptions_DefaultSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-02 - Instrument Setup - Instrument Setup options - Default settings", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Instrument Setup Options"});
            table3.AddRow(new string[] {
                        "Detector Setup"});
            table3.AddRow(new string[] {
                        "Quad calibration"});
            table3.AddRow(new string[] {
                        "CCS calibration"});
            table3.AddRow(new string[] {
                        "Lock CCS calibration"});
#line 60
 testRunner.Then("following instrument setup options are available and set to \'OFF\' by default for " +
                    "both the polarities", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-03 - Instrument Setup - Resolution optimisation - Default settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        public virtual void ISP_03_InstrumentSetup_ResolutionOptimisation_DefaultSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-03 - Instrument Setup - Resolution optimisation - Default settings", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resolution Options",
                        "Toggle"});
            table4.AddRow(new string[] {
                        "Resolution Optimisation",
                        "OFF"});
            table4.AddRow(new string[] {
                        "600",
                        "ON"});
            table4.AddRow(new string[] {
                        "1200",
                        "ON"});
            table4.AddRow(new string[] {
                        "2000",
                        "ON"});
            table4.AddRow(new string[] {
                        "5000",
                        "ON"});
            table4.AddRow(new string[] {
                        "8000",
                        "OFF"});
            table4.AddRow(new string[] {
                        "14000",
                        "OFF"});
            table4.AddRow(new string[] {
                        "32000",
                        "OFF"});
            table4.AddRow(new string[] {
                        "70000",
                        "OFF"});
#line 68
testRunner.Then("following resolution options are available with default toggle setting for all fo" +
                    "ur modes", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-04 - Instrument Setup - Default polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        public virtual void ISP_04_InstrumentSetup_DefaultPolarity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-04 - Instrument Setup - Default polarity", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Polarity",
                        "Default"});
            table5.AddRow(new string[] {
                        "Positive",
                        "OFF"});
            table5.AddRow(new string[] {
                        "Negative",
                        "OFF"});
#line 81
testRunner.Then("the following polarity is set to default Setting", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ISP_05_InstrumentSetup_ActivatePolarityForEntireColumn(string polarity, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-05 - Instrument Setup - Activate polarity for entire column", exampleTags);
#line 90
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 91
testRunner.Given(string.Format("that the \'{0}\' polarity is set to \'OFF\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Instrument Setup Options",
                        "Toggle"});
            table6.AddRow(new string[] {
                        "Detector Setup",
                        "OFF"});
            table6.AddRow(new string[] {
                        "Quad calibration",
                        "ON"});
            table6.AddRow(new string[] {
                        "CCS calibration",
                        "OFF"});
            table6.AddRow(new string[] {
                        "Lock CCS calibration",
                        "ON"});
#line 92
testRunner.And(string.Format("following instrument setup options for \'{0}\' are set to toggle", polarity), ((string)(null)), table6, "And ");
#line 98
testRunner.When(string.Format("\'{0}\' polarity is set to \'ON\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
testRunner.Then(string.Format("All of the instrument setup options for \'{0}\' polarity are set to \'ON\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-05 - Instrument Setup - Activate polarity for entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        public virtual void ISP_05_InstrumentSetup_ActivatePolarityForEntireColumn_Positive()
        {
            this.ISP_05_InstrumentSetup_ActivatePolarityForEntireColumn("Positive", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-05 - Instrument Setup - Activate polarity for entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        public virtual void ISP_05_InstrumentSetup_ActivatePolarityForEntireColumn_Negative()
        {
            this.ISP_05_InstrumentSetup_ActivatePolarityForEntireColumn("Negative", ((string[])(null)));
        }
        
        public virtual void ISP_06_InstrumentSetup_DeactivatePolarityForEntireColumn(string polarity, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-06 - Instrument Setup - Deactivate polarity for entire column", exampleTags);
#line 106
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 107
testRunner.Given(string.Format("that the \'{0}\' polarity is set to \'ON\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Instrument Setup Options",
                        "Toggle"});
            table7.AddRow(new string[] {
                        "Detector Setup",
                        "OFF"});
            table7.AddRow(new string[] {
                        "Quad calibration",
                        "ON"});
            table7.AddRow(new string[] {
                        "CCS calibration",
                        "OFF"});
            table7.AddRow(new string[] {
                        "Lock CCS calibration",
                        "ON"});
#line 108
testRunner.And(string.Format("following instrument setup options for \'{0}\' are set to toggle", polarity), ((string)(null)), table7, "And ");
#line 114
testRunner.When(string.Format("\'{0}\' polarity is set to \'OFF\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
testRunner.Then(string.Format("All of the instrument setup options for \'{0}\' polarity are set to \'OFF\'", polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-06 - Instrument Setup - Deactivate polarity for entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        public virtual void ISP_06_InstrumentSetup_DeactivatePolarityForEntireColumn_Positive()
        {
            this.ISP_06_InstrumentSetup_DeactivatePolarityForEntireColumn("Positive", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-06 - Instrument Setup - Deactivate polarity for entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        public virtual void ISP_06_InstrumentSetup_DeactivatePolarityForEntireColumn_Negative()
        {
            this.ISP_06_InstrumentSetup_DeactivatePolarityForEntireColumn("Negative", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-07 - Instrument Setup - Resolution optimisation panel - Polarities")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        public virtual void ISP_07_InstrumentSetup_ResolutionOptimisationPanel_Polarities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-07 - Instrument Setup - Resolution optimisation panel - Polarities", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 123
testRunner.When("Resolution Optimisation and Mass Calibration Panel is observed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mode",
                        "Toggle"});
            table8.AddRow(new string[] {
                        "Positive Resolution",
                        "OFF"});
            table8.AddRow(new string[] {
                        "Negative Resolution",
                        "OFF"});
            table8.AddRow(new string[] {
                        "Positive Sensitivity",
                        "OFF"});
            table8.AddRow(new string[] {
                        "Negative Sensitivity",
                        "OFF"});
#line 124
testRunner.Then("the following modes are available with default toggle setting", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn(string polarityMode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-08 - Instrument Setup - Resolution Optimisation - Activate polarity mode for " +
                    "entire column", exampleTags);
#line 133
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 134
testRunner.Given(string.Format("\'{0}\' is set to \'OFF\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resolution Options",
                        "Toggle"});
            table9.AddRow(new string[] {
                        "Resolution Optimisation",
                        "ON"});
            table9.AddRow(new string[] {
                        "600",
                        "OFF"});
            table9.AddRow(new string[] {
                        "1200",
                        "ON"});
            table9.AddRow(new string[] {
                        "2000",
                        "OFF"});
            table9.AddRow(new string[] {
                        "5000",
                        "ON"});
            table9.AddRow(new string[] {
                        "8000",
                        "OFF"});
            table9.AddRow(new string[] {
                        "14000",
                        "ON"});
            table9.AddRow(new string[] {
                        "32000",
                        "OFF"});
            table9.AddRow(new string[] {
                        "70000",
                        "ON"});
#line 135
testRunner.And(string.Format("following resolution options for \'{0}\' are set to toggles", polarityMode), ((string)(null)), table9, "And ");
#line 146
testRunner.When(string.Format("\'{0}\' is set to \'ON\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
testRunner.Then(string.Format("All of the resolution options for \'{0}\' are set to \'ON\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-08 - Instrument Setup - Resolution Optimisation - Activate polarity mode for " +
            "entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Positive Resolution")]
        public virtual void ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn_PositiveResolution()
        {
            this.ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn("Positive Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-08 - Instrument Setup - Resolution Optimisation - Activate polarity mode for " +
            "entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Negative Resolution")]
        public virtual void ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn_NegativeResolution()
        {
            this.ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn("Negative Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-08 - Instrument Setup - Resolution Optimisation - Activate polarity mode for " +
            "entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Positive Sensitivity")]
        public virtual void ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn_PositiveSensitivity()
        {
            this.ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn("Positive Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-08 - Instrument Setup - Resolution Optimisation - Activate polarity mode for " +
            "entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Negative Sensitivity")]
        public virtual void ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn_NegativeSensitivity()
        {
            this.ISP_08_InstrumentSetup_ResolutionOptimisation_ActivatePolarityModeForEntireColumn("Negative Sensitivity", ((string[])(null)));
        }
        
        public virtual void ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn(string polarityMode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ISP-09 - Instrument Setup - Resolution Optimisation - Deactivate polarity mode fo" +
                    "r entire column", exampleTags);
#line 156
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 157
testRunner.Given(string.Format("\'{0}\' is set to \'ON\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resolution Options",
                        "Toggle"});
            table10.AddRow(new string[] {
                        "Resolution Optimisation",
                        "ON"});
            table10.AddRow(new string[] {
                        "600",
                        "OFF"});
            table10.AddRow(new string[] {
                        "1200",
                        "ON"});
            table10.AddRow(new string[] {
                        "2000",
                        "OFF"});
            table10.AddRow(new string[] {
                        "5000",
                        "ON"});
            table10.AddRow(new string[] {
                        "8000",
                        "OFF"});
            table10.AddRow(new string[] {
                        "14000",
                        "ON"});
            table10.AddRow(new string[] {
                        "32000",
                        "OFF"});
            table10.AddRow(new string[] {
                        "70000",
                        "ON"});
#line 158
testRunner.And(string.Format("following resolution options for \'{0}\' are set to toggles", polarityMode), ((string)(null)), table10, "And ");
#line 169
testRunner.When(string.Format("\'{0}\' is set to \'OFF\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
testRunner.Then(string.Format("All of the resolution options for \'{0}\' are set to \'OFF\'", polarityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-09 - Instrument Setup - Resolution Optimisation - Deactivate polarity mode fo" +
            "r entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Positive Resolution")]
        public virtual void ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn_PositiveResolution()
        {
            this.ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn("Positive Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-09 - Instrument Setup - Resolution Optimisation - Deactivate polarity mode fo" +
            "r entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Negative Resolution")]
        public virtual void ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn_NegativeResolution()
        {
            this.ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn("Negative Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-09 - Instrument Setup - Resolution Optimisation - Deactivate polarity mode fo" +
            "r entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Positive Sensitivity")]
        public virtual void ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn_PositiveSensitivity()
        {
            this.ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn("Positive Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ISP-09 - Instrument Setup - Resolution Optimisation - Deactivate polarity mode fo" +
            "r entire column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ISP-InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InstrumentSetup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity Mode", "Negative Sensitivity")]
        public virtual void ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn_NegativeSensitivity()
        {
            this.ISP_09_InstrumentSetup_ResolutionOptimisation_DeactivatePolarityModeForEntireColumn("Negative Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
