// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.ManualTune.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TUN_QRZ_FactoryDefaultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - Factory Defaults.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TUN - QRZ - Factory Defaults", "", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "FactoryDefaults"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "TUN - QRZ - Factory Defaults")))
            {
                Quartz.Features.ManualTune.FeatureFiles.TUN_QRZ_FactoryDefaultsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 46
 #line 47
 testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And("I have field values for Control Parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 01 - Load when \'factory_settings.gpb\' file does not exist - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        public virtual void DEF_01_LoadWhenFactory_Settings_GpbFileDoesNotExist_Positive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 01 - Load when \'factory_settings.gpb\' file does not exist - Positive", ((string[])(null)));
#line 51
 this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 52
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
    testRunner.When("all the Control Parameter values are \'set\' to \'Value1\' for \'Positive\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
  testRunner.And("\'Load\' factory Defaults for \'Positive\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
    testRunner.Then("the Control Parameter defaults match the instrument specification for \'Positive\' " +
                    "mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
  testRunner.And("the Dwell Time and Ramp Time parameter defaults match the instrument specificatio" +
                    "n for \'Positive\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 02 - Load when \'factory_settings.gpb\' file does not exist - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        public virtual void DEF_02_LoadWhenFactory_Settings_GpbFileDoesNotExist_Negative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 02 - Load when \'factory_settings.gpb\' file does not exist - Negative", ((string[])(null)));
#line 59
 this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 60
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.When("all the Control Parameter values are \'set\' to \'Value1\' for \'Negative\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
  testRunner.And("\'Load\' factory Defaults for \'Negative\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
    testRunner.Then("the Control Parameter defaults match the instrument specification for \'Negative\' " +
                    "mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.And("the Dwell Time and Ramp Time parameter defaults match the instrument specificatio" +
                    "n for \'Negative\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 03 - Save when \'factory_settings.gpb\' file does not exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void DEF_03_SaveWhenFactory_Settings_GpbFileDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 03 - Save when \'factory_settings.gpb\' file does not exist", new string[] {
                        "SimulatorOnly"});
#line 67
  this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 68
    testRunner.Given("that \'factory_settings.gpb\' file does not exist in the Config folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
    testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
      testRunner.And("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.Then("a \'factory_settings.gpb\' file is created in the Config folder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 04 - Updated after \'factory_settings.gpb\' file newly created - PositivePola" +
            "rity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        public virtual void DEF_04_UpdatedAfterFactory_Settings_GpbFileNewlyCreated_PositivePolarity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 04 - Updated after \'factory_settings.gpb\' file newly created - PositivePola" +
                    "rity", ((string[])(null)));
#line 74
  this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 75
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
   testRunner.And("all the Control Parameter values are \'set\' to \'Value1\' for \'Positive\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
      testRunner.And("\'Load\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
    testRunner.Then("the Control Parameter defaults match the instrument specification for \'Positive\' " +
                    "mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 05 - Updated after \'factory_settings.gpb\' file newly created - NegativePola" +
            "rity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        public virtual void DEF_05_UpdatedAfterFactory_Settings_GpbFileNewlyCreated_NegativePolarity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 05 - Updated after \'factory_settings.gpb\' file newly created - NegativePola" +
                    "rity", ((string[])(null)));
#line 82
  this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 83
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
   testRunner.And("all the Control Parameter values are \'set\' to \'Value1\' for \'Negative\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
      testRunner.And("\'Load\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
    testRunner.Then("the Control Parameter defaults match the instrument specification for \'Negative\' " +
                    "mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 06 - Updated when \'factory_settings.gpb\' file already exists - PositivePola" +
            "rity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_US1#206403")]
        public virtual void DEF_06_UpdatedWhenFactory_Settings_GpbFileAlreadyExists_PositivePolarity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 06 - Updated when \'factory_settings.gpb\' file already exists - PositivePola" +
                    "rity", new string[] {
                        "Defect",
                        "CR_US1#206403"});
#line 91
  this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 92
  testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.When("all the Control Parameter values are \'set\' to \'Value1\' for \'Positive\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
    testRunner.And("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("all the Control Parameter values are \'set\' to \'Value2\' for \'Positive\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
    testRunner.And("\'Load\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.Then("all the Control Parameter values are \'equal\' to \'Value1\' for \'Positive\' mode comb" +
                    "ination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DEF - 07 - Updated when \'factory_settings.gpb\' file already exists - NegativePola" +
            "rity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - Factory Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FactoryDefaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_US1#206403")]
        public virtual void DEF_07_UpdatedWhenFactory_Settings_GpbFileAlreadyExists_NegativePolarity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DEF - 07 - Updated when \'factory_settings.gpb\' file already exists - NegativePola" +
                    "rity", new string[] {
                        "Defect",
                        "CR_US1#206403"});
#line 102
  this.ScenarioSetup(scenarioInfo);
#line 46
 this.FeatureBackground();
#line 103
  testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.When("all the Control Parameter values are \'set\' to \'Value1\' for \'Negative\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
    testRunner.And("\'Save\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("all the Control Parameter values are \'set\' to \'Value2\' for \'Negative\' mode combin" +
                    "ation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
    testRunner.And("\'Load\' factory Defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.Then("all the Control Parameter values are \'equal\' to \'Value1\' for \'Negative\' mode comb" +
                    "ination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
