// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.ManualTune.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TUN_QRZ_GUIFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - GUI.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TUN - QRZ - GUI", "In order to check \'TUNE PAGE\' GUI elements within a Quartz Environment\r\nI want to" +
                    " check that the GUI elements are in place and respond to user input / process st" +
                    "ate changes as expected", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "TUN - QRZ - GUI")))
            {
                Quartz.Features.ManualTune.FeatureFiles.TUN_QRZ_GUIFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 36
#line 37
 testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 01 - GUI - Main Panels")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void TUN_01_GUI_MainPanels()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 01 - GUI - Main Panels", new string[] {
                        "SmokeTest"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 42
 testRunner.Then("the correct panels are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 02 - GUI - Plot Header Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void TUN_02_GUI_PlotHeaderControls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 02 - GUI - Plot Header Controls", new string[] {
                        "SmokeTest"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 46
 testRunner.Then("the correct plot header controls are enabled and preselected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 03 - GUI - Plot Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void TUN_03_GUI_PlotControls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 03 - GUI - Plot Controls", new string[] {
                        "SmokeTest"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 50
 testRunner.Then("the correct plot controls are enabled and preselected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 04 - GUI - Instrument Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_TUN_04")]
        public virtual void TUN_04_GUI_InstrumentControls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 04 - GUI - Instrument Controls", new string[] {
                        "SmokeTest",
                        "cleanup_TUN_04"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 55
 testRunner.Given("the instrument is in Standby", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.Then("the correct instrument controls are enabled and preselected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 05 - GUI - Tab Controls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void TUN_05_GUI_TabControls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 05 - GUI - Tab Controls", new string[] {
                        "SmokeTest"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 60
 testRunner.Then("the correct tab controls are enabled and preselected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN - 06 - GUI - Tabs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void TUN_06_GUI_Tabs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN - 06 - GUI - Tabs", new string[] {
                        "SmokeTest"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 64
 testRunner.Then("the Controls panel will display the correct tabs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-07 - Dropdown Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        public virtual void TUN_07_DropdownOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-07 - Dropdown Options", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Controls",
                        "Selections"});
            table1.AddRow(new string[] {
                        "Factory Parameters",
                        "Reset to Default, Reset to Factory, Load, Save"});
            table1.AddRow(new string[] {
                        "Acquisition",
                        "Custom Tune"});
            table1.AddRow(new string[] {
                        "User defined tab controls",
                        "Delete set, Save set, Load set, Clear"});
#line 68
 testRunner.Then("the following \'Controls\' are available with the \'Selections\'", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-08 - Customized Tab View Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        public virtual void TUN_08_CustomizedTabViewOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-08 - Customized Tab View Options", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 76
 testRunner.Then("the customized tab view displays the correct available tabs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-09 - Tab Element Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        public virtual void TUN_09_TabElementDefaults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-09 - Tab Element Defaults", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 80
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
    testRunner.Then("the Control Parameter defaults match the instrument specification for each polari" +
                    "ty mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-10 - Tab Element Min / Max / Resolution - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_ParameterValues")]
        public virtual void TUN_10_TabElementMinMaxResolution_Positive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-10 - Tab Element Min / Max / Resolution - Positive", new string[] {
                        "cleanup_ParameterValues"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 89
    testRunner.Then("the Control Parameters min, max and resolution match the instrument specification" +
                    " for each \'Positive\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-11 - Tab Element Min / Max / Resolution - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_ParameterValues")]
        public virtual void TUN_11_TabElementMinMaxResolution_Negative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-11 - Tab Element Min / Max / Resolution - Negative", new string[] {
                        "cleanup_ParameterValues"});
#line 96
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 97
    testRunner.Then("the Control Parameters min, max and resolution match the instrument specification" +
                    " for each \'Negative\' mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-12 - Tab Element Readbacks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        public virtual void TUN_12_TabElementReadbacks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-12 - Tab Element Readbacks", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 104
 testRunner.Then("the correct readbacks are displayed for each polarity mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-13 - Dwell Time and Ramp Time Min / Max / Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Osprey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_FW8512")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_ParameterValues")]
        public virtual void TUN_13_DwellTimeAndRampTimeMinMaxResolution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-13 - Dwell Time and Ramp Time Min / Max / Resolution", new string[] {
                        "Osprey",
                        "Defect",
                        "CR_FW8512",
                        "cleanup_ParameterValues"});
#line 110
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 111
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.Then("the Dwell Time and Ramp Time parameter min, max and resolution match the instrume" +
                    "nt specification for each polarity mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("TUN-14 - Dwell Time and Ramp Time Defaults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Osprey")]
        public virtual void TUN_14_DwellTimeAndRampTimeDefaults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TUN-14 - Dwell Time and Ramp Time Defaults", new string[] {
                        "Osprey"});
#line 115
this.ScenarioSetup(scenarioInfo);
#line 36
this.FeatureBackground();
#line 116
 testRunner.And("factory defaults have been reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.Then("the Dwell Time and Ramp Time parameter defaults match the instrument specificatio" +
                    "n for each polarity mode combination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
