// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.SmokeTest.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SMK_QRZ_SmokeTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SMK - QRZ - Smoke Test.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SMK - QRZ - Smoke Test", "As a Quartz user\r\nI want to be be able to perform the basic functions", ProgrammingLanguage.CSharp, new string[] {
                        "SmokeTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "SMK - QRZ - Smoke Test")))
            {
                Quartz.Features.SmokeTest.FeatureFiles.SMK_QRZ_SmokeTestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 01 - Quartz Versioning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_FW9680")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_FW9764")]
        public virtual void SMK_01_QuartzVersioning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 01 - Quartz Versioning", new string[] {
                        "Defect",
                        "CR_FW9680",
                        "CR_FW9764"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
testRunner.Given("the installer is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
testRunner.When("I navigate to the about page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
testRunner.Then("the installed build matches the installer version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.And("the installed build matches the version in add remove programs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("I close the about page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 02 - Quartz Navigation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void SMK_02_QuartzNavigation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 02 - Quartz Navigation", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "instrument page",
                        "number of widgets",
                        "widget title"});
            table1.AddRow(new string[] {
                        "Tune",
                        "3",
                        "Plot Data, Controls"});
            table1.AddRow(new string[] {
                        "Manual Calibration",
                        "2",
                        "Calibrate Slot, Progress Log"});
            table1.AddRow(new string[] {
                        "Instrument Setup",
                        "4",
                        "Instrument Setup"});
            table1.AddRow(new string[] {
                        "Vacuum",
                        "4",
                        "Vacuum status, Pressures (mBar), Turbo Speeds (%), Turbo Operation Times"});
            table1.AddRow(new string[] {
                        "Quad Setup",
                        "3",
                        "Controls, Plot Data, Quad Setup"});
            table1.AddRow(new string[] {
                        "Detector Setup",
                        "4",
                        "Detector Setup, Positive Mass Results, Negative Mass Results, Progress Log"});
            table1.AddRow(new string[] {
                        "Scope Mode",
                        "3",
                        "Scope Mode:, Plot Data, Controls"});
            table1.AddRow(new string[] {
                        "Source Pressure Test",
                        "1",
                        "Source Pressure Test"});
            table1.AddRow(new string[] {
                        "IMS Pressure Control",
                        "1",
                        "IMS Pressure Control"});
            table1.AddRow(new string[] {
                        "Health Status",
                        "1",
                        "Health Status"});
#line 61
testRunner.Then("it is possible to navigate to the following instrument pages", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 03 - Instrument power indicator is displaying correct status the to the use" +
            "r")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void SMK_03_InstrumentPowerIndicatorIsDisplayingCorrectStatusTheToTheUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 03 - Instrument power indicator is displaying correct status the to the use" +
                    "r", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
testRunner.Then("the instrument power indicator should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "instrument power button",
                        "status"});
            table2.AddRow(new string[] {
                        "Source",
                        "yellow"});
            table2.AddRow(new string[] {
                        "Standby",
                        "red"});
            table2.AddRow(new string[] {
                        "Operate",
                        "green"});
#line 77
 testRunner.And("the correct status should be displayed", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 04 - Basic Plot - Start Tuning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_04_BasicPlot_StartTuning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 04 - Basic Plot - Start Tuning", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
testRunner.When("the detector voltage is set to 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.And("Sample Vial A is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("Tuning is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
testRunner.Then("Sodium Formate plot is displayed and refreshes correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 05 - Basic Plot - Abort Tuning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_05_BasicPlot_AbortTuning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 05 - Basic Plot - Abort Tuning", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("the detector voltage is set to 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("Sample Vial A is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("Tuning is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
testRunner.When("Tuning is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
testRunner.Then("Sodium Formate plot is halted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 06 - Basic Plot - Starting and Abort Tuning Consecutively")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_06_BasicPlot_StartingAndAbortTuningConsecutively()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 06 - Basic Plot - Starting and Abort Tuning Consecutively", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
testRunner.Given("the detector voltage is set to 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
 testRunner.And("Sample Vial A is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
testRunner.When("Tuning is started and aborted multiple times in succession", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
testRunner.Then("the Sodium Formate plot refreshes correctly when tuning and is halted when aborte" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SMK_07_BasicPlotTypes_CheckPlot(string button, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "ManualOnly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 07 - Basic Plot Types - Check Plot", @__tags);
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
testRunner.When(string.Format("the plot {0} button is clicked", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
testRunner.Then("the expected live plot is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 07 - Basic Plot Types - Check Plot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "BPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:button", "BPI")]
        public virtual void SMK_07_BasicPlotTypes_CheckPlot_BPI()
        {
            this.SMK_07_BasicPlotTypes_CheckPlot("BPI", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 07 - Basic Plot Types - Check Plot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:button", "MZ")]
        public virtual void SMK_07_BasicPlotTypes_CheckPlot_MZ()
        {
            this.SMK_07_BasicPlotTypes_CheckPlot("MZ", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 07 - Basic Plot Types - Check Plot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TIC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:button", "TIC")]
        public virtual void SMK_07_BasicPlotTypes_CheckPlot_TIC()
        {
            this.SMK_07_BasicPlotTypes_CheckPlot("TIC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 08 - Basic Plot Types - Check Drift Time")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_08_BasicPlotTypes_CheckDriftTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 08 - Basic Plot Types - Check Drift Time", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 127
this.ScenarioSetup(scenarioInfo);
#line 128
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
testRunner.When("the plot DT button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
testRunner.Then("the expected live drift time pop-out dialog is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 09 - Basic Plot Types - Chart Readback Modal - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_09_BasicPlotTypes_ChartReadbackModal_GUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 09 - Basic Plot Types - Chart Readback Modal - GUI", new string[] {
                        "Obsolete",
                        "ignore",
                        "ManualOnly"});
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
testRunner.When("the plot RB button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 140
testRunner.Then("the \'Chart Readback\' dialog should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 141
 testRunner.And("all the \'Chart Readback\' controls should be present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("click the \'Chart Readback\' Cancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 10 - Basic Plot Types - Chart Readback Modal - Currently Plotted List")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_10_BasicPlotTypes_ChartReadbackModal_CurrentlyPlottedList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 10 - Basic Plot Types - Chart Readback Modal - Currently Plotted List", new string[] {
                        "Obsolete",
                        "ignore",
                        "ManualOnly"});
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
testRunner.When("the plot RB button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.And("the \'Chart Readback\' dialog is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
testRunner.Then("items can be added and removed from the Available List to the Currently Plotted L" +
                    "ist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.And("click the \'Chart Readback\' Cancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 11 - Basic Plot Types - Chart Readback Modal - No items in the Currently Pl" +
            "otted List")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_11_BasicPlotTypes_ChartReadbackModal_NoItemsInTheCurrentlyPlottedList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 11 - Basic Plot Types - Chart Readback Modal - No items in the Currently Pl" +
                    "otted List", new string[] {
                        "Obsolete",
                        "ignore",
                        "ManualOnly"});
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
testRunner.When("the plot RB button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.And("the \'Chart Readback\' dialog is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("there are no items in the currently plotted list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
testRunner.Then("the ChartReadback Plot button should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
 testRunner.And("click the \'Chart Readback\' Cancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 12 - Basic Plot Types - Plot Peak Properties Modal - GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_12_BasicPlotTypes_PlotPeakPropertiesModal_GUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 12 - Basic Plot Types - Plot Peak Properties Modal - GUI", new string[] {
                        "Obsolete",
                        "ignore",
                        "ManualOnly"});
#line 170
this.ScenarioSetup(scenarioInfo);
#line 171
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
testRunner.When("the plot PP button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
testRunner.Then("the \'Plot Peak Properties\' dialog should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
 testRunner.And("all the \'Plot Peak Properties\' controls should be present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("click the \'Plot Peak Properties\' Cancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 13 - Basic Plot Types - DT button status and Plot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_13_BasicPlotTypes_DTButtonStatusAndPlot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 13 - Basic Plot Types - DT button status and Plot", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
 testRunner.And("Quartz is in Mobility mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("the plot DT button is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
testRunner.When("Quartz is switched into TOF mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
testRunner.Then("the DT button should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
 testRunner.And("the DT plot should stop updating if it is still visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 14 - Acquisition Tuning")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void SMK_14_AcquisitionTuning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 14 - Acquisition Tuning", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
testRunner.Given("that the Quartz Tune page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
testRunner.When("Tuning is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
 testRunner.And("the Fluidics tabs has been selected from the Controls widget", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sample"});
            table3.AddRow(new string[] {
                        "A"});
            table3.AddRow(new string[] {
                        "B"});
            table3.AddRow(new string[] {
                        "C"});
            table3.AddRow(new string[] {
                        "Wash"});
#line 196
testRunner.Then("a plot should be generated for the following sample", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 15 - Quartz pages do not require a dependency upon http or https")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void SMK_15_QuartzPagesDoNotRequireADependencyUponHttpOrHttps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 15 - Quartz pages do not require a dependency upon http or https", ((string[])(null)));
#line 204
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "quartz page"});
            table4.AddRow(new string[] {
                        "Tune"});
            table4.AddRow(new string[] {
                        "Manual Calibration"});
            table4.AddRow(new string[] {
                        "Instrument Setup"});
            table4.AddRow(new string[] {
                        "Vacuum"});
            table4.AddRow(new string[] {
                        "Quad Setup"});
            table4.AddRow(new string[] {
                        "Detector Setup"});
            table4.AddRow(new string[] {
                        "Scope Mode"});
            table4.AddRow(new string[] {
                        "Source Pressure Test"});
#line 205
testRunner.Given("Quartz does not contain any pages that are dependent upon http or https", ((string)(null)), table4, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 16 - Check for a beam")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        public virtual void SMK_16_CheckForABeam()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 16 - Check for a beam", new string[] {
                        "ignore",
                        "FunctionalityIncomplete"});
#line 218
this.ScenarioSetup(scenarioInfo);
#line 219
testRunner.Given("I am able to log into Quartz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
testRunner.Then("I am able to get a beam", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 17 - Quartz Logging In")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        public virtual void SMK_17_QuartzLoggingIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 17 - Quartz Logging In", new string[] {
                        "ignore",
                        "FunctionalityIncomplete"});
#line 224
this.ScenarioSetup(scenarioInfo);
#line 225
testRunner.Given("that Typhoon has been started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 226
testRunner.And("that Quartz has just been started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
testRunner.When("I am on the Quartz login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
testRunner.Then("I am able to log in using a corporate username and password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 18 - Quartz Logging Out")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        public virtual void SMK_18_QuartzLoggingOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 18 - Quartz Logging Out", new string[] {
                        "ignore",
                        "FunctionalityIncomplete"});
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
testRunner.Given("I am logged into Quartz as a corporate user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
testRunner.Then("Quartz will an option to log out is presented to the user on the Quartz Dashboard" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 235
 testRunner.And("I am able to log out of Quartz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 19 - Quartz User is able to log back in after logging out")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        public virtual void SMK_19_QuartzUserIsAbleToLogBackInAfterLoggingOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 19 - Quartz User is able to log back in after logging out", new string[] {
                        "ignore",
                        "FunctionalityIncomplete"});
#line 239
this.ScenarioSetup(scenarioInfo);
#line 240
testRunner.Given("I am able to log into Quartz as a corporate user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 241
testRunner.Then("I am able to log out of Quartz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.And("I am able to log back into Quartz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SMK - 20 - Quartz Currently Logged in user is displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SMK - QRZ - Smoke Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        public virtual void SMK_20_QuartzCurrentlyLoggedInUserIsDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMK - 20 - Quartz Currently Logged in user is displayed", new string[] {
                        "ignore",
                        "FunctionalityIncomplete"});
#line 246
this.ScenarioSetup(scenarioInfo);
#line 247
testRunner.Given("I am logged into Quartz as a corporate user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
testRunner.Then("the user currently logged in is displayed on the Quartz Dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
