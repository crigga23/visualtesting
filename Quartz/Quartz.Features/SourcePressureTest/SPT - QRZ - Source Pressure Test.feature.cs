// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.SourcePressureTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class SourcePressureTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SPT - QRZ - Source Pressure Test.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Source Pressure Test", "In order to test Source Pressure Test\r\nI want to have the ability to run a Source" +
                    " Pressure Test, view the results and Override it, if it fails\r\nAnd I want to see" +
                    " corresponding changes to the Sample Fluidics when the test fails, and is re-run" +
                    " and passes.", ProgrammingLanguage.CSharp, new string[] {
                        "ignore",
                        "SourcePressureTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Source Pressure Test")))
            {
                Quartz.Features.SourcePressureTest.SourcePressureTestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 53
#line 54
 testRunner.Given("Quartz is logged in and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("the instrument is in \'Operate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-01 Page Elements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_01PageElements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-01 Page Elements", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 62
 testRunner.When("the \'Source Pressure Test\' page is inspected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Elements",
                        "Type"});
            table1.AddRow(new string[] {
                        "Status",
                        "Text Word"});
            table1.AddRow(new string[] {
                        "Advice Message",
                        "Text String"});
            table1.AddRow(new string[] {
                        "Run Test",
                        "Button"});
            table1.AddRow(new string[] {
                        "Override Test",
                        "Button"});
#line 63
 testRunner.Then("these \'Elements\' are available of a specific \'Type\'", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState(string sPTProcessState, string action, string sPTStatus, string buttonState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-02 SPT Process State vs SPT Status and Button State", exampleTags);
#line 70
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 71
 testRunner.When(string.Format("the Source Pressure Test is \'{0}\'", sPTProcessState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
  testRunner.And(string.Format("an \'{0}\' is performed", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.Then(string.Format("the Source Pressure Test is \'{0}\'", sPTStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
  testRunner.And(string.Format("the Run Test button state is \'{0}\'", buttonState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-02 SPT Process State vs SPT Status and Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Process State", "Not Started")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "N/A (None)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Button State", "Enabled")]
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState_Variant0()
        {
            this.SPT_02SPTProcessStateVsSPTStatusAndButtonState("Not Started", "N/A (None)", "Idle", "Enabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-02 SPT Process State vs SPT Status and Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Process State", "Started")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "N/A (None)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Button State", "Disabled")]
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState_Variant1()
        {
            this.SPT_02SPTProcessStateVsSPTStatusAndButtonState("Started", "N/A (None)", "Running", "Disabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-02 SPT Process State vs SPT Status and Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Process State", "Completed (Passed)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "N/A (None)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Button State", "Enabled")]
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState_Variant2()
        {
            this.SPT_02SPTProcessStateVsSPTStatusAndButtonState("Completed (Passed)", "N/A (None)", "Idle", "Enabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-02 SPT Process State vs SPT Status and Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Process State", "Completed (Failed)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "N/A (None)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Button State", "Enabled")]
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState_Variant3()
        {
            this.SPT_02SPTProcessStateVsSPTStatusAndButtonState("Completed (Failed)", "N/A (None)", "Idle", "Enabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-02 SPT Process State vs SPT Status and Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Process State", "Completed (Failed)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "Override")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Button State", "Enabled")]
        public virtual void SPT_02SPTProcessStateVsSPTStatusAndButtonState_Variant4()
        {
            this.SPT_02SPTProcessStateVsSPTStatusAndButtonState("Completed (Failed)", "Override", "Idle", "Enabled", ((string[])(null)));
        }
        
        public virtual void SPT_03TestStatusAndTestAdviceVsOverrideButtonState(string testStatus, string testAdviceString, string overrideButtonState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-03 Test Status and Test Advice vs \'Override\' Button State", exampleTags);
#line 83
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 84
 testRunner.When(string.Format("the Source Pressure Test is in the \'{0}\' state", testStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
  testRunner.And(string.Format("the Advice message contains \'{0}\'", testAdviceString), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then(string.Format("the \'{0}\' will be set", overrideButtonState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-03 Test Status and Test Advice vs \'Override\' Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Override Button Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Status", "Running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Advice String", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Override Button State", "Disabled")]
        public virtual void SPT_03TestStatusAndTestAdviceVsOverrideButtonState_OverrideButtonDisabled_Running()
        {
            this.SPT_03TestStatusAndTestAdviceVsOverrideButtonState("Running", "N/A", "Disabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-03 Test Status and Test Advice vs \'Override\' Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Override Button Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Advice String", "Passed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Override Button State", "Disabled")]
        public virtual void SPT_03TestStatusAndTestAdviceVsOverrideButtonState_OverrideButtonDisabled_Idle()
        {
            this.SPT_03TestStatusAndTestAdviceVsOverrideButtonState("Idle", "Passed", "Disabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-03 Test Status and Test Advice vs \'Override\' Button State")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Override Button Enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Advice String", "Failed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Override Button State", "Enabled")]
        public virtual void SPT_03TestStatusAndTestAdviceVsOverrideButtonState_OverrideButtonEnabled_Idle()
        {
            this.SPT_03TestStatusAndTestAdviceVsOverrideButtonState("Idle", "Failed", "Enabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-04 Perform source pressure test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_04PerformSourcePressureTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-04 Perform source pressure test", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 101
 testRunner.Given("the source pressure test is \'Idle\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.When("an attempt is made to start the source pressure test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("the source pressure test will \'Start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SPT_05FluidicsStatusDuringASPT(string typeOfFluidics, string flowState, string controlsState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-05 Fluidics Status During a SPT", exampleTags);
#line 109
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 110
 testRunner.Given(string.Format("the \'{0}\' flow state is initially at \'Infusion\'", typeOfFluidics), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.When("the source pressure test is being run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.Then(string.Format("the \'{0}\' is set to \'{1}\'", typeOfFluidics, flowState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
  testRunner.And(string.Format("the \'{0}\' controls are \'{1}\'", typeOfFluidics, controlsState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-05 Fluidics Status During a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Sample")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Fluidics", "Sample")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Flow State", "Waste")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls State", "Disabled")]
        public virtual void SPT_05FluidicsStatusDuringASPT_Sample()
        {
            this.SPT_05FluidicsStatusDuringASPT("Sample", "Waste", "Disabled", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-05 Fluidics Status During a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Reference")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Fluidics", "Reference")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Flow State", "N/A (Previous)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls State", "Enabled")]
        public virtual void SPT_05FluidicsStatusDuringASPT_Reference()
        {
            this.SPT_05FluidicsStatusDuringASPT("Reference", "N/A (Previous)", "Enabled", ((string[])(null)));
        }
        
        public virtual void SPT_06FluidicsStatusAfterASPT(string initialFluidicsFlowState, string result, string initialFluidicsStatus, string finalFluidicsStatus, string controlsStatus, string finalFluidicsFlowState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-06 Fluidics Status After a SPT", exampleTags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 120
 testRunner.Given("a source pressure test has already \'Passed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
  testRunner.And(string.Format("the Sample Fluidics Flow State is set to \'{0}\'", initialFluidicsFlowState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.And(string.Format("the sample \'{0}\' status will be set", initialFluidicsStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.When("the source pressure test is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
  testRunner.And(string.Format("the source pressure test \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.Then(string.Format("the Sample \'{0}\' status will be set", finalFluidicsStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
  testRunner.And(string.Format("the Sample Fluidics controls will be \'{0}\'", controlsStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
  testRunner.And(string.Format("the Sample Fluidics Flow State will be set to \'{0}\'", finalFluidicsFlowState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Infusion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Infusion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Infusion")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Passes_Infusion()
        {
            this.SPT_06FluidicsStatusAfterASPT("Infusion", "Passes", "Idle", "Idle", "Enabled", "Infusion", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Combined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Combined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Combined")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Passes_Combined()
        {
            this.SPT_06FluidicsStatusAfterASPT("Combined", "Passes", "Idle", "Idle", "Enabled", "Combined", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "LC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "LC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "LC")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Passes_LC()
        {
            this.SPT_06FluidicsStatusAfterASPT("LC", "Passes", "Idle", "Idle", "Enabled", "LC", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Waste")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Waste")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Passes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Enabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Waste")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Passes_Waste()
        {
            this.SPT_06FluidicsStatusAfterASPT("Waste", "Passes", "Idle", "Idle", "Enabled", "Waste", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Infusion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Infusion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Stopped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Waste")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Fails_Infusion()
        {
            this.SPT_06FluidicsStatusAfterASPT("Infusion", "Fails", "Idle", "Stopped", "Disabled", "Waste", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Combined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Combined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Stopped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Waste")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Fails_Combined()
        {
            this.SPT_06FluidicsStatusAfterASPT("Combined", "Fails", "Idle", "Stopped", "Disabled", "Waste", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "LC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "LC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Stopped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Waste")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Fails_LC()
        {
            this.SPT_06FluidicsStatusAfterASPT("LC", "Fails", "Idle", "Stopped", "Disabled", "Waste", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-06 Fluidics Status After a SPT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Waste")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Flow State", "Waste")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "Fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial Fluidics Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Status", "Stopped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Controls Status", "Disabled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final Fluidics Flow State", "Waste")]
        public virtual void SPT_06FluidicsStatusAfterASPT_Fails_Waste()
        {
            this.SPT_06FluidicsStatusAfterASPT("Waste", "Fails", "Idle", "Stopped", "Disabled", "Waste", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-07 Previous SPT Fail - Fluidics Status After a SPT (Pass and Purge)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_07PreviousSPTFail_FluidicsStatusAfterASPTPassAndPurge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-07 Previous SPT Fail - Fluidics Status After a SPT (Pass and Purge)", ((string[])(null)));
#line 142
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 143
 testRunner.Given("a Source Pressure Test has previously \'Failed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
  testRunner.And("the initial Sample Fluidics Status is \'Stopped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And("the Sample Fluidics Controls are \'Disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("the source pressure test is run and \'Passes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
  testRunner.And("the Sample Fluidics Controls are automatically \'Enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.And("the final Sample Fluidics Status is \'Stopped - Select Purge to Recover\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
  testRunner.And("a Sample Fluidics \'Purge\' is initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.Then("after the purge has completed, the final Sample Fluidics Flow State will be \'Idle" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
  testRunner.And("the Sample Fluidics Controls will \'Enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-08 Previous SPT Fail - Fluidics Status After a SPT (Override and Purge)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_08PreviousSPTFail_FluidicsStatusAfterASPTOverrideAndPurge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-08 Previous SPT Fail - Fluidics Status After a SPT (Override and Purge)", ((string[])(null)));
#line 153
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 154
 testRunner.Given("a Source Pressure Test has previously \'Failed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.When("the source pressure test result is \'Overridden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
  testRunner.And("the final Sample Fluidics Status is \'Stopped - Select Purge to Recover\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And("a Sample Fluidics \'Purge\' is initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.Then("after the purge has completed, the final Sample Fluidics Flow State will be \'Idle" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
  testRunner.And("the Sample Fluidics Controls will \'Enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-09 Clear Override on Log Out")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_09ClearOverrideOnLogOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-09 Clear Override on Log Out", ((string[])(null)));
#line 165
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 166
 testRunner.Given("the source pressure test has \'failed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 167
  testRunner.And("the source pressure test has been \'Overridden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.When("the current users\' browser session is logged out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
  testRunner.And("the same user logs back in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.Then("the previous source pressure test override is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 171
  testRunner.And("a new source pressure test can be successfully run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-09b Not Overriden on Changing Tab")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_09BNotOverridenOnChangingTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-09b Not Overriden on Changing Tab", ((string[])(null)));
#line 173
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 174
 testRunner.Given("the source pressure test has \'failed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 175
  testRunner.And("the source pressure test has been \'Overridden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("I leave and return to the Source Pressure Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("the previous source pressure test override is still set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun(string type, string failureCondition, string sourcePressureTestAdvice, string sourcePressureTestExtraInformation, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-10 Status Messages - Failure Condition (During SPT Run)", exampleTags);
#line 184
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 185
 testRunner.Given("a Source pressure test is NOT currently running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
 testRunner.When(string.Format("a \'{0}\' of source pressure test is run", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
  testRunner.And(string.Format("a specific instrument \'{0}\' is forced during the run", failureCondition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.Then(string.Format("a specific \'{0}\' message will be shown with some \'{1}\'", sourcePressureTestAdvice, sourcePressureTestExtraInformation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "API GAS too Low")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Low API Gas Pressure")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check API gas supply is at 7 bar, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Automatic_Variant0()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Automatic", "API GAS too Low", "Source Pressure Test Failed - Low API Gas Pressure", "Check API gas supply is at 7 bar, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Exhaust Blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Exhaust Pressure too high")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check exhaust system for restriction, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Automatic_Variant1()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Automatic", "Exhaust Blocked", "Source Pressure Test Failed - Exhaust Pressure too high", "Check exhaust system for restriction, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check source and exhaust seals, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Automatic_Variant2()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Automatic", "Source Leak", "Source Pressure Test Failed - Source Leak", "Check source and exhaust seals, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Automatic")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "N/A - None")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Passed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "N/A - None")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Automatic_Variant3()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Automatic", "N/A - None", "Source Pressure Test Passed", "N/A - None", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "API GAS too Low")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Low API Gas Pressure")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check API gas supply is at 7 bar, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Manual_Variant0()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Manual", "API GAS too Low", "Source Pressure Test Failed - Low API Gas Pressure", "Check API gas supply is at 7 bar, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Exhaust Blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Exhaust Pressure too high")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check exhaust system for restriction, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Manual_Variant1()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Manual", "Exhaust Blocked", "Source Pressure Test Failed - Exhaust Pressure too high", "Check exhaust system for restriction, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Failed - Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "Check source and exhaust seals, rerun source pressure test")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Manual_Variant2()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Manual", "Source Leak", "Source Pressure Test Failed - Source Leak", "Check source and exhaust seals, rerun source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-10 Status Messages - Failure Condition (During SPT Run)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type", "Manual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "N/A - None")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Advice", "Source Pressure Test Passed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Extra Information", "N/A - None")]
        public virtual void SPT_10StatusMessages_FailureConditionDuringSPTRun_Manual_Variant3()
        {
            this.SPT_10StatusMessages_FailureConditionDuringSPTRun("Manual", "N/A - None", "Source Pressure Test Passed", "N/A - None", ((string[])(null)));
        }
        
        public virtual void SPT_11StatusMessages_FailureConditionSPTNotRunning(string failureCondition, string sourcePressureTestStatus, string extraInformation, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-11 Status Messages - Failure Condition (SPT Not Running)", exampleTags);
#line 203
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 204
 testRunner.Given("a Source pressure test is NOT currently running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 205
 testRunner.When(string.Format("a specific instrument \'{0}\' is forced", failureCondition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
 testRunner.Then(string.Format("a specific \'{0}\' message will be shown with some \'<Extra Information>\'", sourcePressureTestStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-11 Status Messages - Failure Condition (SPT Not Running)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "API GAS too Low")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "API GAS too Low")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Status", "Warning: API Gas Pressure Low")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Extra information", "Check API gas supply is at 7 bar")]
        public virtual void SPT_11StatusMessages_FailureConditionSPTNotRunning_APIGASTooLow()
        {
            this.SPT_11StatusMessages_FailureConditionSPTNotRunning("API GAS too Low", "Warning: API Gas Pressure Low", "Check API gas supply is at 7 bar", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-11 Status Messages - Failure Condition (SPT Not Running)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Exhaust Blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Exhaust Blocked")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Status", "High Exhaust Pressure Trip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Extra information", "Check exhaust system for restriction, run source pressure test")]
        public virtual void SPT_11StatusMessages_FailureConditionSPTNotRunning_ExhaustBlocked()
        {
            this.SPT_11StatusMessages_FailureConditionSPTNotRunning("Exhaust Blocked", "High Exhaust Pressure Trip", "Check exhaust system for restriction, run source pressure test", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-11 Status Messages - Failure Condition (SPT Not Running)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Failure Condition", "Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Source Pressure Test Status", "Warning: Source Leak")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Extra information", "Check source and exhaust seals")]
        public virtual void SPT_11StatusMessages_FailureConditionSPTNotRunning_SourceLeak()
        {
            this.SPT_11StatusMessages_FailureConditionSPTNotRunning("Source Leak", "Warning: Source Leak", "Check source and exhaust seals", ((string[])(null)));
        }
        
        public virtual void SPT_12DisplaySourcePressureReadbackPlotWhenSPTInProgress(string sPTStatus, string sPTRBPlotState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-12 Display Source Pressure Readback Plot when SPT in Progress", exampleTags);
#line 218
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 219
 testRunner.Given("a Source Pressure Test has \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
 testRunner.When(string.Format("a Source pressure Test is \'{0}\'", sPTStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
 testRunner.Then(string.Format("a graphical display showing the Source Pressure Readback \'Vacuum.SourcePressure.R" +
                        "eadback\' will be \'{0}\'", sPTRBPlotState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-12 Display Source Pressure Readback Plot when SPT in Progress")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Running")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT RB Plot State", "Plotting")]
        public virtual void SPT_12DisplaySourcePressureReadbackPlotWhenSPTInProgress_Running()
        {
            this.SPT_12DisplaySourcePressureReadbackPlotWhenSPTInProgress("Running", "Plotting", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-12 Display Source Pressure Readback Plot when SPT in Progress")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT Status", "Idle")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SPT RB Plot State", "Not Plotting")]
        public virtual void SPT_12DisplaySourcePressureReadbackPlotWhenSPTInProgress_Idle()
        {
            this.SPT_12DisplaySourcePressureReadbackPlotWhenSPTInProgress("Idle", "Not Plotting", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("SPT-13 Display Source Pressure Readback Plot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Source Pressure Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SourcePressureTest")]
        public virtual void SPT_13DisplaySourcePressureReadbackPlot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SPT-13 Display Source Pressure Readback Plot", ((string[])(null)));
#line 230
this.ScenarioSetup(scenarioInfo);
#line 53
this.FeatureBackground();
#line 231
 testRunner.Given("a Source Pressure Test has previously \'Completed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 232
  testRunner.When("the next Source Pressure Test has \'Started\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 233
 testRunner.Then("the previous Source Pressure Readback \'Vacuum.SourcePressure.Readback\' plot is cl" +
                    "eared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
  testRunner.And("a new Source Pressure Readback \'Vacuum.SourcePressure.Readback\' starts to plot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
