// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class APCISourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - APCI parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "APCI source parameters", "In order to use an APCI source on the instrument\r\nI want to be able to see APCI s" +
                    "ource specific parametere with readbacks for settings\r\nAnd to be able to modify," +
                    " save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "Obsolete",
                        "ManualTune",
                        "Sources",
                        "cleanup_SourceSwitching",
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "APCI source parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.APCISourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 40
#line 41
 testRunner.Given("APCI source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-01 - APCI parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void APCI_01_APCIParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-01 - APCI parameters availability", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 48
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Corona mode",
                        "No"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Corona Current (µA)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Corona Voltage (kV)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Sampling Cone (V)",
                        "No"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Source Temperature (°C)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Probe Temperature (°C)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Cone Gas (L/hour)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APCI",
                        "Desolvation Gas (L/hour)",
                        "Yes"});
#line 50
 testRunner.Then("the following \'APCI\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 60
 testRunner.And("only these \'8\' parameters are displayed on the \'APCI\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-02 - APCI parameters availability - Corona mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_FW4708")]
        public virtual void APCI_02_APCIParametersAvailability_CoronaMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-02 - APCI parameters availability - Corona mode", new string[] {
                        "Defect",
                        "CR_FW4708"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 65
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Corona mode"});
            table2.AddRow(new string[] {
                        "Current"});
            table2.AddRow(new string[] {
                        "Voltage"});
#line 67
 testRunner.Then("the Corona mode parameter is available with following dropdown options", ((string)(null)), table2, "Then ");
#line 71
  testRunner.And("the default Corona Mode option is \'Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void APCI_03_APCIDefaultParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Defect",
                    "CR_Default_values_are_incorrect"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-03 - APCI default parameters - Positive", @__tags);
#line 75
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 76
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3",
                        "1",
                        "µA"});
            table3.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40",
                        "1",
                        "V"});
            table3.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "1",
                        "L/hour"});
#line 79
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-03 - APCI default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_are_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_03_APCIDefaultParameters_Positive_Positive_Resolution()
        {
            this.APCI_03_APCIDefaultParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-03 - APCI default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_are_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_03_APCIDefaultParameters_Positive_Positive_Sensitivity()
        {
            this.APCI_03_APCIDefaultParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_04_APCIDefaultParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Defect",
                    "CR_Default_values_are_incorrect"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-04 - APCI default parameters - Negative", @__tags);
#line 96
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 97
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table4.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3",
                        "1",
                        "µA"});
            table4.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40",
                        "1",
                        "V"});
            table4.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "1",
                        "°C"});
            table4.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20",
                        "1",
                        "°C"});
            table4.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "1",
                        "L/hour"});
            table4.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "1",
                        "L/hour"});
#line 100
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-04 - APCI default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_are_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_04_APCIDefaultParameters_Negative_Negative_Resolution()
        {
            this.APCI_04_APCIDefaultParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-04 - APCI default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_are_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_04_APCIDefaultParameters_Negative_Negative_Sensitivity()
        {
            this.APCI_04_APCIDefaultParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-05 - APCI parameters range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void APCI_05_APCIParametersRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-05 - APCI parameters range", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 117
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table5.AddRow(new string[] {
                        "Corona Current (µA)",
                        "0",
                        "35",
                        "1"});
            table5.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "0",
                        "200",
                        "1"});
            table5.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "20",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20",
                        "650",
                        "1"});
            table5.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "0",
                        "300",
                        "1"});
            table5.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "1200",
                        "1"});
#line 119
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void APCI_06_LoadFactoryDefaultsAPCIParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Defect",
                    "CR_Default_Values_Incorrect"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-06 - Load factory defaults APCI parameters - Positive", @__tags);
#line 131
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 132
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table6.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table6.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table6.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table6.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table6.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table6.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 135
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table6, "When ");
#line 144
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table7.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3"});
            table7.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00"});
            table7.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table7.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table7.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20"});
            table7.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table7.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300"});
#line 145
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-06 - Load factory defaults APCI parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_Values_Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_06_LoadFactoryDefaultsAPCIParameters_Positive_Positive_Resolution()
        {
            this.APCI_06_LoadFactoryDefaultsAPCIParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-06 - Load factory defaults APCI parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_Values_Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_06_LoadFactoryDefaultsAPCIParameters_Positive_Positive_Sensitivity()
        {
            this.APCI_06_LoadFactoryDefaultsAPCIParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_07_LoadFactoryDefaultsAPCIParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Defect",
                    "CR_Default_Values_Incorrect"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-07 - Load factory defaults APCI parameters - Negative", @__tags);
#line 162
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 163
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 164
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table8.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table8.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table8.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table8.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table8.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table8.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 166
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table8, "When ");
#line 175
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table9.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3"});
            table9.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00"});
            table9.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table9.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table9.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20"});
            table9.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table9.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300"});
#line 176
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-07 - Load factory defaults APCI parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_Values_Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_07_LoadFactoryDefaultsAPCIParameters_Negative_Negative_Resolution()
        {
            this.APCI_07_LoadFactoryDefaultsAPCIParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-07 - Load factory defaults APCI parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Defect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_Values_Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_07_LoadFactoryDefaultsAPCIParameters_Negative_Negative_Sensitivity()
        {
            this.APCI_07_LoadFactoryDefaultsAPCIParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_08_SaveAndLoadFactoryDefaultsAPCIParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-08 - Save and Load factory defaults APCI parameters", exampleTags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 193
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table10.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table10.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table10.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table10.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table10.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table10.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 196
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table10, "When ");
#line 205
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "Corona Current (µA)",
                        "10"});
            table11.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.25"});
            table11.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "50"});
            table11.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "120"});
            table11.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "40"});
            table11.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "60"});
            table11.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "350"});
#line 206
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table11, "When ");
#line 215
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table12.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table12.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table12.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table12.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table12.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table12.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table12.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 216
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-08 - Save and Load factory defaults APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_08_SaveAndLoadFactoryDefaultsAPCIParameters_Positive_Resolution()
        {
            this.APCI_08_SaveAndLoadFactoryDefaultsAPCIParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-08 - Save and Load factory defaults APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_08_SaveAndLoadFactoryDefaultsAPCIParameters_Negative_Sensitivity()
        {
            this.APCI_08_SaveAndLoadFactoryDefaultsAPCIParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_09_SaveAndLoadAPCIParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-09 - Save and Load APCI parameters", exampleTags);
#line 232
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 233
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table13.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table13.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table13.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table13.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table13.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table13.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table13.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 236
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table13, "When ");
#line 245
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "Corona Current (µA)",
                        "10"});
            table14.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "3.25"});
            table14.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "35"});
            table14.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "110"});
            table14.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "30"});
            table14.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "70"});
            table14.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "350"});
#line 246
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table14, "When ");
#line 255
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13"});
            table15.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table15.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table15.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table15.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "472"});
            table15.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table15.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "985"});
#line 256
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-09 - Save and Load APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_09_SaveAndLoadAPCIParameters_Positive_Resolution()
        {
            this.APCI_09_SaveAndLoadAPCIParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-09 - Save and Load APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_09_SaveAndLoadAPCIParameters_Negative_Resolution()
        {
            this.APCI_09_SaveAndLoadAPCIParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-09 - Save and Load APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_09_SaveAndLoadAPCIParameters_Positive_Sensitivity()
        {
            this.APCI_09_SaveAndLoadAPCIParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-09 - Save and Load APCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_09_SaveAndLoadAPCIParameters_Negative_Sensitivity()
        {
            this.APCI_09_SaveAndLoadAPCIParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_10_APCIReadbacks_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-10 - APCI readbacks - Positive", exampleTags);
#line 275
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 276
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table16.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3",
                        "13"});
            table16.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "4.25"});
            table16.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "145"});
            table16.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20",
                        "90"});
            table16.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "10"});
            table16.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "425"});
#line 280
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-10 - APCI readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_10_APCIReadbacks_Positive_Positive_Resolution()
        {
            this.APCI_10_APCIReadbacks_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-10 - APCI readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_10_APCIReadbacks_Positive_Positive_Sensitivity()
        {
            this.APCI_10_APCIReadbacks_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APCI_11_APCIReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APCI-11 - APCI readbacks - Negative", exampleTags);
#line 295
this.ScenarioSetup(scenarioInfo);
#line 40
this.FeatureBackground();
#line 296
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table17.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3",
                        "20"});
            table17.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "1.25"});
            table17.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "50"});
            table17.AddRow(new string[] {
                        "Probe Temperature (°C)",
                        "20",
                        "150"});
            table17.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "150"});
            table17.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "500"});
#line 300
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-11 - APCI readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APCI_11_APCIReadbacks_Negative_Negative_Resolution()
        {
            this.APCI_11_APCIReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APCI-11 - APCI readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "APCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APCI_11_APCIReadbacks_Negative_Negative_Sensitivity()
        {
            this.APCI_11_APCIReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
