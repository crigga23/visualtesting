// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TUN_QRZ_APGCSourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - APGC Source Parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TUN - QRZ - APGC Source Parameters", "In order to use an APGC source on the instrument\r\nI want to be able to see APGC s" +
                    "ource specific parametere with readbacks for settings\r\nAnd to be able to modify," +
                    " save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "SimulatorOnly",
                        "ManualTune",
                        "Sources",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "TUN - QRZ - APGC Source Parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.TUN_QRZ_APGCSourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 41
#line 42
 testRunner.Given("APGC source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-01 - APGC parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void APGC_01_APGCParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-01 - APGC parameters availability", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 49
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("the Corona Mode option is \'Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Corona mode",
                        "No"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Corona Current (µA)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Sampling Cone (V)",
                        "No"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Source Temperature (°C)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Cone Gas (L/hour)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "APGC",
                        "Purge Gas (L/hour)",
                        "Yes"});
#line 52
 testRunner.Then("the following \'APGC\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 60
 testRunner.When("the Corona Mode option is \'Voltage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table2.AddRow(new string[] {
                        "APGC",
                        "Corona Voltage (kV)",
                        "Yes"});
#line 61
 testRunner.Then("the following \'APGC\' source parameters and readbacks are available", ((string)(null)), table2, "Then ");
#line 65
 testRunner.And("only these \'6\' parameters are displayed on the \'APGC\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-02 - APGC parameters availability - Corona mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void APGC_02_APGCParametersAvailability_CoronaMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-02 - APGC parameters availability - Corona mode", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 69
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Corona mode"});
            table3.AddRow(new string[] {
                        "Current"});
            table3.AddRow(new string[] {
                        "Voltage"});
#line 71
 testRunner.Then("the Corona mode parameter is available with following dropdown options", ((string)(null)), table3, "Then ");
#line 75
  testRunner.And("the default Corona Mode option is \'Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void APGC_03_APGCDefaultParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-03 - APGC default parameters", exampleTags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 79
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table4.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3.0",
                        "0.1",
                        "µA"});
            table4.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40",
                        "0",
                        "V"});
            table4.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "0",
                        "°C"});
            table4.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "0",
                        "L/hour"});
            table4.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "350",
                        "0",
                        "L/hour"});
#line 82
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-03 - APGC default parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_03_APGCDefaultParameters_Positive_Resolution()
        {
            this.APGC_03_APGCDefaultParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-03 - APGC default parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_03_APGCDefaultParameters_Negative_Resolution()
        {
            this.APGC_03_APGCDefaultParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-03 - APGC default parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_03_APGCDefaultParameters_Positive_Sensitivity()
        {
            this.APGC_03_APGCDefaultParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-03 - APGC default parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_03_APGCDefaultParameters_Negative_Sensitivity()
        {
            this.APGC_03_APGCDefaultParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-04 - APGC parameters range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void APGC_04_APGCParametersRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-04 - APGC parameters range", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 101
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table5.AddRow(new string[] {
                        "Corona Current (µA)",
                        "0.0",
                        "35.0",
                        "0.1"});
            table5.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "0",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "20",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "0",
                        "300",
                        "1"});
            table5.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "0",
                        "800",
                        "1"});
#line 103
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void APGC_05_LoadFactoryDefaultsAPGCParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-05 - Load factory defaults APGC parameters", exampleTags);
#line 113
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 114
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13.0"});
            table6.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table6.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table6.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table6.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table6.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "743"});
#line 117
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table6, "When ");
#line 125
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table7.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3.0"});
            table7.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00"});
            table7.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table7.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table7.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table7.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "350"});
#line 126
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-05 - Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_05_LoadFactoryDefaultsAPGCParameters_Positive_Resolution()
        {
            this.APGC_05_LoadFactoryDefaultsAPGCParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-05 - Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_05_LoadFactoryDefaultsAPGCParameters_Negative_Resolution()
        {
            this.APGC_05_LoadFactoryDefaultsAPGCParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-05 - Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_05_LoadFactoryDefaultsAPGCParameters_Positive_Sensitivity()
        {
            this.APGC_05_LoadFactoryDefaultsAPGCParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-05 - Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_05_LoadFactoryDefaultsAPGCParameters_Negative_Sensitivity()
        {
            this.APGC_05_LoadFactoryDefaultsAPGCParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APGC_06_SaveAndLoadFactoryDefaultsAPGCParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-06 - Save and Load factory defaults APGC parameters", exampleTags);
#line 143
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 144
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 145
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13.0"});
            table8.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table8.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table8.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table8.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table8.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "743"});
#line 147
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table8, "When ");
#line 155
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table9.AddRow(new string[] {
                        "Corona Current (µA)",
                        "7.0"});
            table9.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "3.25"});
            table9.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "50"});
            table9.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "130"});
            table9.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "70"});
            table9.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "200"});
#line 156
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table9, "When ");
#line 164
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table10.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13.0"});
            table10.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table10.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table10.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table10.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table10.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "743"});
#line 165
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-06 - Save and Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_06_SaveAndLoadFactoryDefaultsAPGCParameters_Positive_Resolution()
        {
            this.APGC_06_SaveAndLoadFactoryDefaultsAPGCParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-06 - Save and Load factory defaults APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_06_SaveAndLoadFactoryDefaultsAPGCParameters_Negative_Sensitivity()
        {
            this.APGC_06_SaveAndLoadFactoryDefaultsAPGCParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APGC_07_SaveAndLoadAPGCParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-07 - Save and Load APGC parameters", exampleTags);
#line 180
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 181
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13.0"});
            table11.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table11.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table11.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table11.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table11.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "743"});
#line 184
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table11, "When ");
#line 192
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "Corona Current (µA)",
                        "7.0"});
            table12.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "3.25"});
            table12.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "50"});
            table12.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "130"});
            table12.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "70"});
            table12.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "200"});
#line 193
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table12, "When ");
#line 201
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table13.AddRow(new string[] {
                        "Corona Current (µA)",
                        "13.0"});
            table13.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "4.25"});
            table13.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "58"});
            table13.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "124"});
            table13.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "120"});
            table13.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "743"});
#line 202
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-07 - Save and Load APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_07_SaveAndLoadAPGCParameters_Positive_Resolution()
        {
            this.APGC_07_SaveAndLoadAPGCParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-07 - Save and Load APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_07_SaveAndLoadAPGCParameters_Negative_Resolution()
        {
            this.APGC_07_SaveAndLoadAPGCParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-07 - Save and Load APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_07_SaveAndLoadAPGCParameters_Positive_Sensitivity()
        {
            this.APGC_07_SaveAndLoadAPGCParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-07 - Save and Load APGC parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_07_SaveAndLoadAPGCParameters_Negative_Sensitivity()
        {
            this.APGC_07_SaveAndLoadAPGCParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void APGC_08_APGCReadbacks(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("APGC-08 - APGC readbacks", exampleTags);
#line 219
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 220
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
  testRunner.And("the \'APGC\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table14.AddRow(new string[] {
                        "Corona Current (µA)",
                        "3.0",
                        "13.0"});
            table14.AddRow(new string[] {
                        "Corona Voltage (kV)",
                        "2.00",
                        "4.25"});
            table14.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "124"});
            table14.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "120"});
            table14.AddRow(new string[] {
                        "Purge Gas (L/hour)",
                        "350",
                        "623"});
#line 224
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-08 - APGC readbacks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_08_APGCReadbacks_Positive_Resolution()
        {
            this.APGC_08_APGCReadbacks("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-08 - APGC readbacks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void APGC_08_APGCReadbacks_Negative_Resolution()
        {
            this.APGC_08_APGCReadbacks("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-08 - APGC readbacks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_08_APGCReadbacks_Positive_Sensitivity()
        {
            this.APGC_08_APGCReadbacks("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("APGC-08 - APGC readbacks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - APGC Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void APGC_08_APGCReadbacks_Negative_Sensitivity()
        {
            this.APGC_08_APGCReadbacks("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
