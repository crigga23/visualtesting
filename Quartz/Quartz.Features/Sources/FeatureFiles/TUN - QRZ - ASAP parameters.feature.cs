// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class ASAPSourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - ASAP parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ASAP source parameters", "In order to use an ASAP source on the instrument\r\nI want to be able to see ASAP s" +
                    "ource specific parameters with readbacks for settings\r\nAnd to be able to modify," +
                    " save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "ignore",
                        "Obsolete",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ASAP source parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.ASAPSourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 39
#line 40
 testRunner.Given("ASAP source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-01 - Parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_readback_named_incorrectly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_not_displayed")]
        public virtual void ASAP_01_ParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-01 - Parameters availability", new string[] {
                        "CR_Corona_Voltage_readback_named_incorrectly",
                        "CR_Sample_Cone_field_not_displayed"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 48
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "LockSpray Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Corona mode",
                        "No"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Corona Current",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Corona Voltage",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Cone",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Source Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Desolvation Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Cone Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ASAP1",
                        "Desolvation Gas",
                        "Yes"});
#line 50
 testRunner.Then("the following \'ASAP\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 61
  testRunner.And("only these \'8\' parameters are displayed on the \'ASAP1\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-02 - Parameters availability - Corona mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ASAP_02_ParametersAvailability_CoronaMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-02 - Parameters availability - Corona mode", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 65
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Corona mode"});
            table2.AddRow(new string[] {
                        "Current"});
            table2.AddRow(new string[] {
                        "Voltage"});
#line 67
 testRunner.Then("the Corona mode parameter is available with following dropdown options", ((string)(null)), table2, "Then ");
#line 71
  testRunner.And("the default Corona Mode option is \'Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ASAP_03_ASAPDefaultParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Default_values_incorrect",
                    "CR_Corona_Voltage_is_not_editable",
                    "ignore",
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-03 - ASAP default parameters - Positive", @__tags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 79
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "1",
                        "µA"});
            table3.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table3.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "1",
                        "L/hour"});
#line 82
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-03 - ASAP default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_03_ASAPDefaultParameters_Positive_Positive_Resolution()
        {
            this.ASAP_03_ASAPDefaultParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-03 - ASAP default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_03_ASAPDefaultParameters_Positive_Positive_Sensitivity()
        {
            this.ASAP_03_ASAPDefaultParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_04_ASAPDefaultParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Default_values_incorrect",
                    "CR_Corona_Voltage_is_not_editable",
                    "ignore",
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-04 - ASAP default parameters - Negative", @__tags);
#line 103
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 104
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table4.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "1",
                        "µA"});
            table4.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table4.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table4.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "1",
                        "°C"});
            table4.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table4.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "1",
                        "L/hour"});
#line 107
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-04 - ASAP default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_04_ASAPDefaultParameters_Negative_Negative_Resolution()
        {
            this.ASAP_04_ASAPDefaultParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-04 - ASAP default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Default_values_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_04_ASAPDefaultParameters_Negative_Negative_Sensitivity()
        {
            this.ASAP_04_ASAPDefaultParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-05 - ASAP parameters ranges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        public virtual void ASAP_05_ASAPParametersRanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-05 - ASAP parameters ranges", new string[] {
                        "CR_Sample_Cone_field_not_displayed",
                        "CR_Corona_Current_max_is_incorrect",
                        "CR_Corona_Voltage_is_not_editable"});
#line 126
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 127
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table5.AddRow(new string[] {
                        "LockSpray Capillary",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Corona Current",
                        "0",
                        "35",
                        "1"});
            table5.AddRow(new string[] {
                        "Corona Voltage",
                        "0",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Cone",
                        "0",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Source Temperature",
                        "20",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "650",
                        "1"});
            table5.AddRow(new string[] {
                        "Cone Gas",
                        "0",
                        "300",
                        "1"});
            table5.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "1200",
                        "1"});
#line 129
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ASAP_06_ASAPReadbacks_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Corona_Current_max_is_incorrect",
                    "CR_Corona_Voltage_not_editable",
                    "CR_Sample_Cone_field_is_not_displayed"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-06 - ASAP readbacks - Positive", @__tags);
#line 144
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 145
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table6.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "3.75"});
            table6.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "13"});
            table6.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "4.25"});
            table6.AddRow(new string[] {
                        "Cone",
                        "40",
                        "58"});
            table6.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "124"});
            table6.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "320"});
            table6.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "120"});
            table6.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "885"});
#line 149
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-06 - ASAP readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_06_ASAPReadbacks_Positive_Positive_Resolution()
        {
            this.ASAP_06_ASAPReadbacks_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-06 - ASAP readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_06_ASAPReadbacks_Positive_Positive_Sensitivity()
        {
            this.ASAP_06_ASAPReadbacks_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_07_ASAPReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Corona_Current_max_is_incorrect",
                    "CR_Corona_Voltage_not_editable",
                    "CR_Sample_Cone_field_is_not_displayed"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-07 - ASAP readbacks - Negative", @__tags);
#line 169
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 170
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table7.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "1.20"});
            table7.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "6"});
            table7.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "1.75"});
            table7.AddRow(new string[] {
                        "Cone",
                        "40",
                        "52"});
            table7.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "118"});
            table7.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "170"});
            table7.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "45"});
            table7.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "425"});
#line 174
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-07 - ASAP readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_07_ASAPReadbacks_Negative_Negative_Resolution()
        {
            this.ASAP_07_ASAPReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-07 - ASAP readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_07_ASAPReadbacks_Negative_Negative_Sensitivity()
        {
            this.ASAP_07_ASAPReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_08_LoadFactoryDefaultsASAPParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Corona_Voltage_is_not_editable"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-08 - Load factory defaults ASAP parameters - Positive", @__tags);
#line 191
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 192
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 193
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table8.AddRow(new string[] {
                        "Corona Current",
                        "5"});
            table8.AddRow(new string[] {
                        "Corona Voltage",
                        "3.33"});
            table8.AddRow(new string[] {
                        "Cone",
                        "55"});
            table8.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table8.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table8.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table8.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 195
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table8, "When ");
#line 205
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table9.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00"});
            table9.AddRow(new string[] {
                        "Corona Current",
                        "3"});
            table9.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00"});
            table9.AddRow(new string[] {
                        "Cone",
                        "40"});
            table9.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table9.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250"});
            table9.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table9.AddRow(new string[] {
                        "Desolvation Gas",
                        "600"});
#line 206
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-08 - Load factory defaults ASAP parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_08_LoadFactoryDefaultsASAPParameters_Positive_Positive_Resolution()
        {
            this.ASAP_08_LoadFactoryDefaultsASAPParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-08 - Load factory defaults ASAP parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_08_LoadFactoryDefaultsASAPParameters_Positive_Positive_Sensitivity()
        {
            this.ASAP_08_LoadFactoryDefaultsASAPParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_09_LoadFactoryDefaultsASAPParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Corona_Voltage_is_not_editable"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-09 - Load factory defaults ASAP parameters - Negative", @__tags);
#line 224
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 225
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 226
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table10.AddRow(new string[] {
                        "Corona Current",
                        "5"});
            table10.AddRow(new string[] {
                        "Corona Voltage",
                        "3.33"});
            table10.AddRow(new string[] {
                        "Cone",
                        "55"});
            table10.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table10.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table10.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table10.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 228
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table10, "When ");
#line 238
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table11.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50"});
            table11.AddRow(new string[] {
                        "Corona Current",
                        "3"});
            table11.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00"});
            table11.AddRow(new string[] {
                        "Cone",
                        "40"});
            table11.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table11.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250"});
            table11.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table11.AddRow(new string[] {
                        "Desolvation Gas",
                        "600"});
#line 239
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-09 - Load factory defaults ASAP parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_09_LoadFactoryDefaultsASAPParameters_Negative_Negative_Resolution()
        {
            this.ASAP_09_LoadFactoryDefaultsASAPParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-09 - Load factory defaults ASAP parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_09_LoadFactoryDefaultsASAPParameters_Negative_Negative_Sensitivity()
        {
            this.ASAP_09_LoadFactoryDefaultsASAPParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_10_SaveAndLoadFactoryDefaultsASAPParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Corona_Current_max_is_incorrect",
                    "CR_Corona_Voltage_is_not_editable"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-10 - Save and Load factory defaults ASAP parameters", @__tags);
#line 258
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 259
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "LockSpray Capillary",
                        "4.30"});
            table12.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table12.AddRow(new string[] {
                        "Corona Voltage",
                        "4.25"});
            table12.AddRow(new string[] {
                        "Cone",
                        "58"});
            table12.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table12.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table12.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 262
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table12, "When ");
#line 271
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table13.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.30"});
            table13.AddRow(new string[] {
                        "Corona Current",
                        "10"});
            table13.AddRow(new string[] {
                        "Corona Voltage",
                        "5.25"});
            table13.AddRow(new string[] {
                        "Cone",
                        "50"});
            table13.AddRow(new string[] {
                        "Source Temperature",
                        "120"});
            table13.AddRow(new string[] {
                        "Cone Gas",
                        "60"});
            table13.AddRow(new string[] {
                        "Desolvation Gas",
                        "350"});
#line 272
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table13, "When ");
#line 281
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table14.AddRow(new string[] {
                        "LockSpray Capillary",
                        "4.30"});
            table14.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table14.AddRow(new string[] {
                        "Corona Voltage",
                        "4.250"});
            table14.AddRow(new string[] {
                        "Cone",
                        "58"});
            table14.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table14.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table14.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 282
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-10 - Save and Load factory defaults ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_10_SaveAndLoadFactoryDefaultsASAPParameters_Positive_Resolution()
        {
            this.ASAP_10_SaveAndLoadFactoryDefaultsASAPParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-10 - Save and Load factory defaults ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Current_max_is_incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Corona_Voltage_is_not_editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_10_SaveAndLoadFactoryDefaultsASAPParameters_Negative_Sensitivity()
        {
            this.ASAP_10_SaveAndLoadFactoryDefaultsASAPParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ASAP_11_SaveAndLoadASAPParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CR_Sample_Cone_field_is_not_displayed"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ASAP-11 - Save and Load ASAP parameters", @__tags);
#line 299
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 300
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 301
  testRunner.And("the \'ASAP1\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "LockSpray Capillary",
                        "4.00"});
            table15.AddRow(new string[] {
                        "Corona Current",
                        "5"});
            table15.AddRow(new string[] {
                        "Corona Voltage",
                        "3.33"});
            table15.AddRow(new string[] {
                        "Cone",
                        "55"});
            table15.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table15.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table15.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table15.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 303
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table15, "When ");
#line 313
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table16.AddRow(new string[] {
                        "LockSpray Capillary",
                        "4.80"});
            table16.AddRow(new string[] {
                        "Corona Current",
                        "5.5"});
            table16.AddRow(new string[] {
                        "Corona Voltage",
                        "4.50"});
            table16.AddRow(new string[] {
                        "Cone",
                        "70"});
            table16.AddRow(new string[] {
                        "Source Temperature",
                        "140"});
            table16.AddRow(new string[] {
                        "Desolvation Temperature",
                        "520"});
            table16.AddRow(new string[] {
                        "Cone Gas",
                        "80"});
            table16.AddRow(new string[] {
                        "Desolvation Gas",
                        "700"});
#line 314
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table16, "When ");
#line 324
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table17.AddRow(new string[] {
                        "LockSpray Capillary",
                        "4.00"});
            table17.AddRow(new string[] {
                        "Corona Curent",
                        "5"});
            table17.AddRow(new string[] {
                        "Corona Voltage",
                        "3.33"});
            table17.AddRow(new string[] {
                        "Cone",
                        "55"});
            table17.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table17.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table17.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table17.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 325
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-11 - Save and Load ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_11_SaveAndLoadASAPParameters_Positive_Sensitivity()
        {
            this.ASAP_11_SaveAndLoadASAPParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-11 - Save and Load ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_11_SaveAndLoadASAPParameters_Positive_Resolution()
        {
            this.ASAP_11_SaveAndLoadASAPParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-11 - Save and Load ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensivitity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensivitity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ASAP_11_SaveAndLoadASAPParameters_Negative_Sensivitity()
        {
            this.ASAP_11_SaveAndLoadASAPParameters("Negative_Sensivitity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ASAP-11 - Save and Load ASAP parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ASAP source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CR_Sample_Cone_field_is_not_displayed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ASAP_11_SaveAndLoadASAPParameters_Negative_Resolution()
        {
            this.ASAP_11_SaveAndLoadASAPParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
