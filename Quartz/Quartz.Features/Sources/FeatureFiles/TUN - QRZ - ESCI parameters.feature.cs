// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class ESCISourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - ESCI parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ESCI source parameters", "In order to use an ESCI source on the instrument\r\nI want to be able to see ESCI s" +
                    "ource specific parametere with readbacks for settings\r\nAnd to be able to modify," +
                    " save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "ignore",
                        "Obsolete",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ESCI source parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.ESCISourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 39
#line 40
 testRunner.Given("ESCI source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-01 - ESCI parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ESCI_01_ESCIParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-01 - ESCI parameters availability", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 46
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "LockSpray Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Corona mode",
                        "No"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Corona Current",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Corona Voltage",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Cone",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Source Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Desolvation Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Cone Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESCI",
                        "Desolvation Gas",
                        "Yes"});
#line 48
 testRunner.Then("the following \'ESCI\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 60
  testRunner.And("only these \'10\' parameters are displayed on the \'ESCI\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-02 - ESCI parameters availability - Corona mode")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ESCI_02_ESCIParametersAvailability_CoronaMode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-02 - ESCI parameters availability - Corona mode", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 65
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Corona mode"});
            table2.AddRow(new string[] {
                        "Current"});
            table2.AddRow(new string[] {
                        "Voltage"});
#line 67
 testRunner.Then("the Corona mode parameter is available with following dropdown options", ((string)(null)), table2, "Then ");
#line 71
  testRunner.And("the default Corona Mode option is \'Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ESCI_03_ESCIDefaultParameters_PositivePolarity(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-03 - ESCI default parameters - Positive polarity", @__tags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 79
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "0",
                        "µA"});
            table3.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Cone",
                        "40",
                        "0",
                        "V"});
            table3.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "0",
                        "°C"});
            table3.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "0",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "0",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "0",
                        "L/hour"});
#line 82
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-03 - ESCI default parameters - Positive polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_03_ESCIDefaultParameters_PositivePolarity_Positive_Resolution()
        {
            this.ESCI_03_ESCIDefaultParameters_PositivePolarity("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-03 - ESCI default parameters - Positive polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_03_ESCIDefaultParameters_PositivePolarity_Positive_Sensitivity()
        {
            this.ESCI_03_ESCIDefaultParameters_PositivePolarity("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_04_ESCIDefaultParameters_NegativePolarity(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-04 - ESCI default parameters - Negative polarity", @__tags);
#line 102
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 103
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ESCI Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table4.AddRow(new string[] {
                        "Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "0",
                        "µA"});
            table4.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "0.01",
                        "kV"});
            table4.AddRow(new string[] {
                        "Cone",
                        "40",
                        "0",
                        "V"});
            table4.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "0",
                        "°C"});
            table4.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "0",
                        "°C"});
            table4.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "0",
                        "L/hour"});
            table4.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "0",
                        "L/hour"});
#line 106
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-04 - ESCI default parameters - Negative polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_04_ESCIDefaultParameters_NegativePolarity_Negative_Resolution()
        {
            this.ESCI_04_ESCIDefaultParameters_NegativePolarity("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-04 - ESCI default parameters - Negative polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_04_ESCIDefaultParameters_NegativePolarity_Negative_Sensitivity()
        {
            this.ESCI_04_ESCIDefaultParameters_NegativePolarity("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-05 - ESCI parameters range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ESCI_05_ESCIParametersRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-05 - ESCI parameters range", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 126
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table5.AddRow(new string[] {
                        "Capillary",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "LockSpray Capillary",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Corona Current",
                        "0",
                        "35",
                        "1"});
            table5.AddRow(new string[] {
                        "Corona Voltage",
                        "0.00",
                        "5.00",
                        "0.01"});
            table5.AddRow(new string[] {
                        "Cone",
                        "0",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Source Temperature",
                        "20",
                        "150",
                        "1"});
            table5.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "650",
                        "1"});
            table5.AddRow(new string[] {
                        "Cone Gas",
                        "0",
                        "300",
                        "1"});
            table5.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "1200",
                        "1"});
#line 128
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ESCI_06_LoadFactoryDefaultsESCIParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-06 - Load factory defaults ESCI parameters - Positive", exampleTags);
#line 142
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 143
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Capillary",
                        "1.18"});
            table6.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table6.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table6.AddRow(new string[] {
                        "Corona Voltage",
                        "4.25"});
            table6.AddRow(new string[] {
                        "Cone",
                        "58"});
            table6.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table6.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table6.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table6.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 146
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table6, "When ");
#line 157
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table7.AddRow(new string[] {
                        "Capillary",
                        "3.00"});
            table7.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00"});
            table7.AddRow(new string[] {
                        "Corona Current",
                        "3"});
            table7.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00"});
            table7.AddRow(new string[] {
                        "Cone",
                        "40"});
            table7.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table7.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20"});
            table7.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table7.AddRow(new string[] {
                        "Desolvation Gas",
                        "300"});
#line 158
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-06 - Load factory defaults ESCI parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_06_LoadFactoryDefaultsESCIParameters_Positive_Positive_Resolution()
        {
            this.ESCI_06_LoadFactoryDefaultsESCIParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-06 - Load factory defaults ESCI parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_06_LoadFactoryDefaultsESCIParameters_Positive_Positive_Sensitivity()
        {
            this.ESCI_06_LoadFactoryDefaultsESCIParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_07_LoadFactoryDefaultsESCIParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-07 - Load factory defaults ESCI parameters - Negative", exampleTags);
#line 176
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 177
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 178
  testRunner.And("the \'APCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "Capillary",
                        "4.26"});
            table8.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.80"});
            table8.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table8.AddRow(new string[] {
                        "Corona Voltage",
                        "4.25"});
            table8.AddRow(new string[] {
                        "Cone",
                        "58"});
            table8.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table8.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table8.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table8.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 180
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table8, "When ");
#line 191
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table9.AddRow(new string[] {
                        "Capillary",
                        "2.50"});
            table9.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50"});
            table9.AddRow(new string[] {
                        "Corona Current",
                        "3"});
            table9.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00"});
            table9.AddRow(new string[] {
                        "Cone",
                        "40"});
            table9.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table9.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20"});
            table9.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table9.AddRow(new string[] {
                        "Desolvation Gas",
                        "300"});
#line 192
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-07 - Load factory defaults ESCI parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_07_LoadFactoryDefaultsESCIParameters_Negative_Negative_Resolution()
        {
            this.ESCI_07_LoadFactoryDefaultsESCIParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-07 - Load factory defaults ESCI parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_07_LoadFactoryDefaultsESCIParameters_Negative_Negative_Sensitivity()
        {
            this.ESCI_07_LoadFactoryDefaultsESCIParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_08_SaveAndLoadFactoryDefaultsESCIParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-08 - Save and Load factory defaults ESCI parameters", exampleTags);
#line 210
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 211
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "Capillary",
                        "4.26"});
            table10.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.80"});
            table10.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table10.AddRow(new string[] {
                        "Corona Voltage",
                        "4.25"});
            table10.AddRow(new string[] {
                        "Cone",
                        "58"});
            table10.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table10.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table10.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table10.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 214
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table10, "When ");
#line 225
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "Capillary",
                        "2.80"});
            table11.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.95"});
            table11.AddRow(new string[] {
                        "Corona Current",
                        "7"});
            table11.AddRow(new string[] {
                        "Corona Voltage",
                        "3.25"});
            table11.AddRow(new string[] {
                        "Cone",
                        "70"});
            table11.AddRow(new string[] {
                        "Source Temperature",
                        "150"});
            table11.AddRow(new string[] {
                        "Desolvation Temperature",
                        "420"});
            table11.AddRow(new string[] {
                        "Cone Gas",
                        "136"});
            table11.AddRow(new string[] {
                        "Desolvation Gas",
                        "785"});
#line 226
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table11, "When ");
#line 237
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table12.AddRow(new string[] {
                        "Capillary",
                        "4.26"});
            table12.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.80"});
            table12.AddRow(new string[] {
                        "Corona Current",
                        "13"});
            table12.AddRow(new string[] {
                        "Corona Voltage",
                        "4.25"});
            table12.AddRow(new string[] {
                        "Cone",
                        "58"});
            table12.AddRow(new string[] {
                        "Source Temperature",
                        "124"});
            table12.AddRow(new string[] {
                        "Desolvation Temperature",
                        "472"});
            table12.AddRow(new string[] {
                        "Cone Gas",
                        "120"});
            table12.AddRow(new string[] {
                        "Desolvation Gas",
                        "985"});
#line 238
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-08 - Save and Load factory defaults ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_08_SaveAndLoadFactoryDefaultsESCIParameters_Positive_Resolution()
        {
            this.ESCI_08_SaveAndLoadFactoryDefaultsESCIParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-08 - Save and Load factory defaults ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_08_SaveAndLoadFactoryDefaultsESCIParameters_Negative_Sensitivity()
        {
            this.ESCI_08_SaveAndLoadFactoryDefaultsESCIParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_09_SaveAndLoadESCIParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-09 - Save and Load ESCI parameters", exampleTags);
#line 256
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 257
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 258
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table13.AddRow(new string[] {
                        "Capillary",
                        "1.18"});
            table13.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.38"});
            table13.AddRow(new string[] {
                        "Corona Current",
                        "12"});
            table13.AddRow(new string[] {
                        "Corona Voltage",
                        "4.35"});
            table13.AddRow(new string[] {
                        "Cone",
                        "56"});
            table13.AddRow(new string[] {
                        "Source Temperature",
                        "119"});
            table13.AddRow(new string[] {
                        "Desolvation Temperature",
                        "476"});
            table13.AddRow(new string[] {
                        "Cone Gas",
                        "128"});
            table13.AddRow(new string[] {
                        "Desolvation Gas",
                        "918"});
#line 260
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table13, "When ");
#line 271
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "Capillary",
                        "2.84"});
            table14.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.98"});
            table14.AddRow(new string[] {
                        "Corona Current",
                        "8"});
            table14.AddRow(new string[] {
                        "Corona Voltage",
                        "3.30"});
            table14.AddRow(new string[] {
                        "Cone",
                        "71"});
            table14.AddRow(new string[] {
                        "Source Temperature",
                        "151"});
            table14.AddRow(new string[] {
                        "Desolvation Temperature",
                        "421"});
            table14.AddRow(new string[] {
                        "Cone Gas",
                        "138"});
            table14.AddRow(new string[] {
                        "Desolvation Gas",
                        "790"});
#line 272
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table14, "When ");
#line 283
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "Capillary",
                        "1.18"});
            table15.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.38"});
            table15.AddRow(new string[] {
                        "Corona Current",
                        "12"});
            table15.AddRow(new string[] {
                        "Corona Voltage",
                        "4.35"});
            table15.AddRow(new string[] {
                        "Cone",
                        "56"});
            table15.AddRow(new string[] {
                        "Source Temperature",
                        "119"});
            table15.AddRow(new string[] {
                        "Desolvation Temperature",
                        "476"});
            table15.AddRow(new string[] {
                        "Cone Gas",
                        "128"});
            table15.AddRow(new string[] {
                        "Desolvation Gas",
                        "918"});
#line 284
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-09 - Save and Load ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_09_SaveAndLoadESCIParameters_Positive_Resolution()
        {
            this.ESCI_09_SaveAndLoadESCIParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-09 - Save and Load ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_09_SaveAndLoadESCIParameters_Negative_Resolution()
        {
            this.ESCI_09_SaveAndLoadESCIParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-09 - Save and Load ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_09_SaveAndLoadESCIParameters_Positive_Sensitivity()
        {
            this.ESCI_09_SaveAndLoadESCIParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-09 - Save and Load ESCI parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_09_SaveAndLoadESCIParameters_Negative_Sensitivity()
        {
            this.ESCI_09_SaveAndLoadESCIParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_10_ESCIReadbacks_PositivePolarity(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-10 - ESCI readbacks - Positive polarity", exampleTags);
#line 306
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 307
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 308
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table16.AddRow(new string[] {
                        "Capillary",
                        "3.00",
                        "1.18"});
            table16.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "3.75"});
            table16.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "13"});
            table16.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "4.25"});
            table16.AddRow(new string[] {
                        "Cone",
                        "40",
                        "58"});
            table16.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "124"});
            table16.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "60"});
            table16.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "120"});
            table16.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "600"});
#line 311
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-10 - ESCI readbacks - Positive polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_10_ESCIReadbacks_PositivePolarity_Positive_Resolution()
        {
            this.ESCI_10_ESCIReadbacks_PositivePolarity("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-10 - ESCI readbacks - Positive polarity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_10_ESCIReadbacks_PositivePolarity_Positive_Sensitivity()
        {
            this.ESCI_10_ESCIReadbacks_PositivePolarity("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESCI_11_ESCIReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESCI-11 - ESCI readbacks - Negative", exampleTags);
#line 329
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 330
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 331
  testRunner.And("the \'ESCI\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table17.AddRow(new string[] {
                        "Capillary",
                        "2.50",
                        "4.26"});
            table17.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "1.20"});
            table17.AddRow(new string[] {
                        "Corona Current",
                        "3",
                        "10"});
            table17.AddRow(new string[] {
                        "Corona Voltage",
                        "2.00",
                        "4.25"});
            table17.AddRow(new string[] {
                        "Cone",
                        "40",
                        "80"});
            table17.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "150"});
            table17.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "300"});
            table17.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "120"});
            table17.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "550"});
#line 334
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-11 - ESCI readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESCI_11_ESCIReadbacks_Negative_Negative_Resolution()
        {
            this.ESCI_11_ESCIReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESCI-11 - ESCI readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ESCI source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESCI_11_ESCIReadbacks_Negative_Negative_Sensitivity()
        {
            this.ESCI_11_ESCIReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
