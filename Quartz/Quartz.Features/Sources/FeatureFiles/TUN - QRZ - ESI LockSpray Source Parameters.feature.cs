// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TUN_QRZ_ESILockSpraySourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - ESI LockSpray Source Parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TUN - QRZ - ESI LockSpray Source Parameters", "In order to use an ESI LockSpray source on the instrument\r\nI want to be able to s" +
                    "ee ESI LockSpray source specific parameters with readbacks for settings\r\nAnd to " +
                    "be able to modify, save and load the settings\r\nAnd apply the setting to the inst" +
                    "rument", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "Sources",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "TUN - QRZ - ESI LockSpray Source Parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.TUN_QRZ_ESILockSpraySourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 38
#line 39
 testRunner.Given("ESI Lockspray source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-01 - ESI LockSpray Parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void ESI_01_ESILockSprayParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-01 - ESI LockSpray Parameters availability", new string[] {
                        "SmokeTest"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 46
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Reference Capillary (kV)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Capillary (kV)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Sampling Cone (V)",
                        "No"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Source Temperature (°C)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Desolvation Temperature (°C)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Cone Gas (L/hour)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Desolvation Gas (L/hour)",
                        "Yes"});
            table1.AddRow(new string[] {
                        "ESI LockSpray",
                        "Source Offset (V)",
                        "Yes"});
#line 48
 testRunner.Then("the following \'ESI\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 58
  testRunner.And("only these \'8\' parameters are displayed on the \'ESI LockSpray\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ESI_02_ESILockSprayDefaultParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-02 - ESI LockSpray default parameters - Positive", exampleTags);
#line 61
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 62
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table2.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "3.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40",
                        "1",
                        "V"});
            table2.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "1",
                        "°C"});
            table2.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250",
                        "1",
                        "°C"});
            table2.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "1",
                        "L/hour"});
            table2.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600",
                        "1",
                        "L/hour"});
            table2.AddRow(new string[] {
                        "Source Offset (V)",
                        "80",
                        "1",
                        "V"});
#line 65
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-02 - ESI LockSpray default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_02_ESILockSprayDefaultParameters_Positive_Positive_Sensitivity()
        {
            this.ESI_02_ESILockSprayDefaultParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-02 - ESI LockSpray default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_02_ESILockSprayDefaultParameters_Positive_Positive_Resolution()
        {
            this.ESI_02_ESILockSprayDefaultParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        public virtual void ESI_03_ESILockSprayDefaultParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-03 - ESI LockSpray default parameters - Negative", exampleTags);
#line 83
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 84
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "2.50",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Capillary (kV)",
                        "2.00",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40",
                        "1",
                        "V"});
            table3.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Source Offset (V)",
                        "80",
                        "1",
                        "V"});
#line 87
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-03 - ESI LockSpray default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_03_ESILockSprayDefaultParameters_Negative_Negative_Sensitivity()
        {
            this.ESI_03_ESILockSprayDefaultParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-03 - ESI LockSpray default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_03_ESILockSprayDefaultParameters_Negative_Negative_Resolution()
        {
            this.ESI_03_ESILockSprayDefaultParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-04 - ESI LockSpray parameters ranges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ESI_04_ESILockSprayParametersRanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-04 - ESI LockSpray parameters ranges", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 105
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table4.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "0.00",
                        "5.00",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Capillary (kV)",
                        "0.00",
                        "5.00",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "0",
                        "150",
                        "1"});
            table4.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "20",
                        "150",
                        "1"});
            table4.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "20",
                        "650",
                        "1"});
            table4.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "0",
                        "300",
                        "1"});
            table4.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "300",
                        "1200",
                        "1"});
            table4.AddRow(new string[] {
                        "Source Offset (V)",
                        "0",
                        "150",
                        "1"});
#line 107
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ESI_05_ESILockSprayReadbacks_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-05 - ESI LockSpray readbacks - Positive", @__tags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 120
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table5.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "3.00",
                        "4.50"});
            table5.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.00",
                        "4.50"});
            table5.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "140"});
            table5.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250",
                        "300"});
            table5.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "80"});
            table5.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600",
                        "800"});
            table5.AddRow(new string[] {
                        "Source Offset (V)",
                        "80",
                        "120"});
#line 124
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-05 - ESI LockSpray readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_05_ESILockSprayReadbacks_Positive_Positive_Resolution()
        {
            this.ESI_05_ESILockSprayReadbacks_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-05 - ESI LockSpray readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_05_ESILockSprayReadbacks_Positive_Positive_Sensitivity()
        {
            this.ESI_05_ESILockSprayReadbacks_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESI_06_ESILockSprayReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-06 - ESI LockSpray readbacks - Negative", @__tags);
#line 140
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 141
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table6.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "2.50",
                        "1.80"});
            table6.AddRow(new string[] {
                        "Capillary (kV)",
                        "2.50",
                        "1.50"});
            table6.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100",
                        "140"});
            table6.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250",
                        "290"});
            table6.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50",
                        "80"});
            table6.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600",
                        "500"});
            table6.AddRow(new string[] {
                        "Source Offset (V)",
                        "80",
                        "30"});
#line 145
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-06 - ESI LockSpray readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_06_ESILockSprayReadbacks_Negative_Negative_Resolution()
        {
            this.ESI_06_ESILockSprayReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-06 - ESI LockSpray readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_06_ESILockSprayReadbacks_Negative_Negative_Sensitivity()
        {
            this.ESI_06_ESILockSprayReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ESI_07_LoadFactoryDefaultESILockSprayParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-07 - Load factory default ESI LockSpray parameters - Positive", exampleTags);
#line 162
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 163
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 164
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table7.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "4.50"});
            table7.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.50"});
            table7.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table7.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table7.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table7.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table7.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table7.AddRow(new string[] {
                        "Source Offset (V)",
                        "100"});
#line 166
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table7, "When ");
#line 176
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table8.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "3.00"});
            table8.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.00"});
            table8.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table8.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table8.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250"});
            table8.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table8.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600"});
            table8.AddRow(new string[] {
                        "Source Offset (V)",
                        "80"});
#line 177
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-07 - Load factory default ESI LockSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_07_LoadFactoryDefaultESILockSprayParameters_Positive_Positive_Sensitivity()
        {
            this.ESI_07_LoadFactoryDefaultESILockSprayParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-07 - Load factory default ESI LockSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_07_LoadFactoryDefaultESILockSprayParameters_Positive_Positive_Resolution()
        {
            this.ESI_07_LoadFactoryDefaultESILockSprayParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        public virtual void ESI_08_LoadFactoryDefaultsESILockSprayParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-08 - Load factory defaults ESI LockSpray parameters - Negative", exampleTags);
#line 194
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 195
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 196
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table9.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "4.50"});
            table9.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.50"});
            table9.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table9.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table9.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table9.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table9.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table9.AddRow(new string[] {
                        "Source Offset (V)",
                        "40"});
#line 198
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table9, "When ");
#line 208
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table10.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "2.50"});
            table10.AddRow(new string[] {
                        "Capillary (kV)",
                        "2.00"});
            table10.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table10.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table10.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250"});
            table10.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table10.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600"});
            table10.AddRow(new string[] {
                        "Source Offset (V)",
                        "80"});
#line 209
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-08 - Load factory defaults ESI LockSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_08_LoadFactoryDefaultsESILockSprayParameters_Negative_Negative_Sensitivity()
        {
            this.ESI_08_LoadFactoryDefaultsESILockSprayParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-08 - Load factory defaults ESI LockSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_08_LoadFactoryDefaultsESILockSprayParameters_Negative_Negative_Resolution()
        {
            this.ESI_08_LoadFactoryDefaultsESILockSprayParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        public virtual void ESI_09_SaveAndLoadFactoryDefaultsESILockSprayParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-09 - Save and Load factory defaults ESI LockSpray parameters", exampleTags);
#line 226
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 227
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 228
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "1.75"});
            table11.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.50"});
            table11.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table11.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table11.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table11.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table11.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table11.AddRow(new string[] {
                        "Source Offset (V)",
                        "40"});
#line 230
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table11, "When ");
#line 240
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "4.20"});
            table12.AddRow(new string[] {
                        "Capillary (kV)",
                        "2.50"});
            table12.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "40"});
            table12.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "100"});
            table12.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "250"});
            table12.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "50"});
            table12.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "600"});
            table12.AddRow(new string[] {
                        "Source Offset (V)",
                        "70"});
#line 241
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table12, "When ");
#line 251
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table13.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "1.75"});
            table13.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.50"});
            table13.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table13.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table13.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table13.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table13.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table13.AddRow(new string[] {
                        "Source Offset (V)",
                        "40"});
#line 252
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-09 - Save and Load factory defaults ESI LockSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_09_SaveAndLoadFactoryDefaultsESILockSprayParameters_Negative_Sensitivity()
        {
            this.ESI_09_SaveAndLoadFactoryDefaultsESILockSprayParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-09 - Save and Load factory defaults ESI LockSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_09_SaveAndLoadFactoryDefaultsESILockSprayParameters_Positive_Resolution()
        {
            this.ESI_09_SaveAndLoadFactoryDefaultsESILockSprayParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        public virtual void ESI_10_SaveAndLoadESILockSprayParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-10 - Save and Load ESI LockSpray parameters - Positive", exampleTags);
#line 269
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 270
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 271
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "1.00"});
            table14.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.50"});
            table14.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table14.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table14.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table14.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table14.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table14.AddRow(new string[] {
                        "Source Offset (V)",
                        "99"});
#line 273
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table14, "When ");
#line 283
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "3.80"});
            table15.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.55"});
            table15.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "56"});
            table15.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "112"});
            table15.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "334"});
            table15.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "67"});
            table15.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table15.AddRow(new string[] {
                        "Source Offset (V)",
                        "25"});
#line 284
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table15, "When ");
#line 294
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table16.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "1.00"});
            table16.AddRow(new string[] {
                        "Capillary (kV)",
                        "3.50"});
            table16.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table16.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table16.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table16.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table16.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table16.AddRow(new string[] {
                        "Source Offset (V)",
                        "99"});
#line 295
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-10 - Save and Load ESI LockSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_10_SaveAndLoadESILockSprayParameters_Positive_Positive_Sensitivity()
        {
            this.ESI_10_SaveAndLoadESILockSprayParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-10 - Save and Load ESI LockSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_10_SaveAndLoadESILockSprayParameters_Positive_Positive_Resolution()
        {
            this.ESI_10_SaveAndLoadESILockSprayParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        public virtual void ESI_11_SaveAndLoadESILockSprayParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESI-11 - Save and Load ESI LockSpray parameters - Negative", exampleTags);
#line 312
this.ScenarioSetup(scenarioInfo);
#line 38
this.FeatureBackground();
#line 313
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 314
  testRunner.And("the \'ESI LockSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table17.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "0.50"});
            table17.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.50"});
            table17.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table17.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table17.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table17.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table17.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table17.AddRow(new string[] {
                        "Source Offset (V)",
                        "140"});
#line 316
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table17, "When ");
#line 326
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table18.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "1.30"});
            table18.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.70"});
            table18.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "57"});
            table18.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "113"});
            table18.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "335"});
            table18.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "68"});
            table18.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "556"});
            table18.AddRow(new string[] {
                        "Source Offset (V)",
                        "50"});
#line 327
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table18, "When ");
#line 337
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table19.AddRow(new string[] {
                        "Reference Capillary (kV)",
                        "0.50"});
            table19.AddRow(new string[] {
                        "Capillary (kV)",
                        "1.50"});
            table19.AddRow(new string[] {
                        "Sampling Cone (V)",
                        "55"});
            table19.AddRow(new string[] {
                        "Source Temperature (°C)",
                        "111"});
            table19.AddRow(new string[] {
                        "Desolvation Temperature (°C)",
                        "333"});
            table19.AddRow(new string[] {
                        "Cone Gas (L/hour)",
                        "66"});
            table19.AddRow(new string[] {
                        "Desolvation Gas (L/hour)",
                        "555"});
            table19.AddRow(new string[] {
                        "Source Offset (V)",
                        "140"});
#line 338
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-11 - Save and Load ESI LockSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ESI_11_SaveAndLoadESILockSprayParameters_Negative_Negative_Sensitivity()
        {
            this.ESI_11_SaveAndLoadESILockSprayParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ESI-11 - Save and Load ESI LockSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TUN - QRZ - ESI LockSpray Source Parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ESI_11_SaveAndLoadESILockSprayParameters_Negative_Negative_Resolution()
        {
            this.ESI_11_SaveAndLoadESILockSprayParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
