// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class IonKeySourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - IonKey source parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IonKey source parameters", "In order to use an IonKey source on the instrument\r\nI want to be able to see IonK" +
                    "ey source specific parametere with readbacks for settings\r\nAnd to be able to mod" +
                    "ify, save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "Obsolete",
                        "ignore",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "IonKey source parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.IonKeySourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 39
#line 40
 testRunner.Given("IonKey source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-01 - Parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ION_01_ParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-01 - Parameters availability", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 46
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "LockSpray Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Cone",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Source Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Cone Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Purge Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Nano Flow Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "IonKey",
                        "Trap Cooling Gas",
                        "Yes"});
#line 48
 testRunner.Then("the following \'IonKey\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 58
  testRunner.And("only these \'7\' parameters are displayed on the \'IonKey\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ION_02_IonKeyDefaultParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-02 - IonKey default parameters - Positive", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 64
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table2.AddRow(new string[] {
                        "Lockspray Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table2.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table2.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table2.AddRow(new string[] {
                        "Purge Gas",
                        "350",
                        "1",
                        "L/hour"});
            table2.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30",
                        "0.01",
                        "bar"});
            table2.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0",
                        "1",
                        "L/hour"});
#line 67
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-02 - IonKey default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_02_IonKeyDefaultParameters_Positive_Positive_Resolution()
        {
            this.ION_02_IonKeyDefaultParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-02 - IonKey default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_02_IonKeyDefaultParameters_Positive_Positive_Sensitivity()
        {
            this.ION_02_IonKeyDefaultParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_03_IonKeyDefaultParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-03 - IonKey default parameters - Negative", @__tags);
#line 86
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 87
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table3.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Purge Gas",
                        "350",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30",
                        "0.01",
                        "bar"});
            table3.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0",
                        "1",
                        "L/hour"});
#line 90
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-03 - IonKey default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_03_IonKeyDefaultParameters_Negative_Negative_Resolution()
        {
            this.ION_03_IonKeyDefaultParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-03 - IonKey default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_03_IonKeyDefaultParameters_Negative_Negative_Sensitivity()
        {
            this.ION_03_IonKeyDefaultParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-04 - IonKey parameters ranges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void ION_04_IonKeyParametersRanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-04 - IonKey parameters ranges", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 108
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table4.AddRow(new string[] {
                        "LockSpray Capillary",
                        "0",
                        "5",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Capillary",
                        "0",
                        "5",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Cone",
                        "0",
                        "150",
                        "1"});
            table4.AddRow(new string[] {
                        "Source Temperature",
                        "20",
                        "150",
                        "1"});
            table4.AddRow(new string[] {
                        "Cone Gas",
                        "0",
                        "300",
                        "1"});
            table4.AddRow(new string[] {
                        "Purge Gas",
                        "0",
                        "800",
                        "1"});
            table4.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0",
                        "2",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0",
                        "1200",
                        "1"});
#line 110
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ION_05_IonKeyReadbacks_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-05 - IonKey readbacks - Positive", exampleTags);
#line 123
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 124
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table5.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "2.70"});
            table5.AddRow(new string[] {
                        "Capillary",
                        "3.00",
                        "2.30"});
            table5.AddRow(new string[] {
                        "Cone",
                        "40",
                        "55"});
            table5.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "111"});
            table5.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "66"});
            table5.AddRow(new string[] {
                        "Purge Gas",
                        "800",
                        "950"});
            table5.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30",
                        "0.75"});
            table5.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0",
                        "120"});
#line 128
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-05 - IonKey readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_05_IonKeyReadbacks_Positive_Positive_Resolution()
        {
            this.ION_05_IonKeyReadbacks_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-05 - IonKey readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_05_IonKeyReadbacks_Positive_Positive_Sensitivity()
        {
            this.ION_05_IonKeyReadbacks_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_06_IonKeyReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-06 - IonKey readbacks - Negative", exampleTags);
#line 145
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 146
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table6.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50",
                        "2.20"});
            table6.AddRow(new string[] {
                        "Capillary",
                        "2.5",
                        "1.5"});
            table6.AddRow(new string[] {
                        "Cone",
                        "40",
                        "80"});
            table6.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "160"});
            table6.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "90"});
            table6.AddRow(new string[] {
                        "Purge Gas",
                        "800",
                        "999"});
            table6.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30",
                        "1.60"});
            table6.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0",
                        "500"});
#line 150
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-06 - IonKey readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_06_IonKeyReadbacks_Negative_Negative_Resolution()
        {
            this.ION_06_IonKeyReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-06 - IonKey readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_06_IonKeyReadbacks_Negative_Negative_Sensitivity()
        {
            this.ION_06_IonKeyReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_07_LoadFactoryDefaultsIonKeyParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-07 - Load factory defaults IonKey parameters - Positive", exampleTags);
#line 167
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 168
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table7.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.30"});
            table7.AddRow(new string[] {
                        "Capillary",
                        "2.30"});
            table7.AddRow(new string[] {
                        "Cone",
                        "55"});
            table7.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table7.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table7.AddRow(new string[] {
                        "Purge Gas",
                        "999"});
            table7.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.75"});
            table7.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "10"});
#line 171
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table7, "When ");
#line 181
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table8.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00"});
            table8.AddRow(new string[] {
                        "Capillary",
                        "3.00"});
            table8.AddRow(new string[] {
                        "Cone",
                        "40"});
            table8.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table8.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table8.AddRow(new string[] {
                        "Purge Gas",
                        "800"});
            table8.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30"});
            table8.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0"});
#line 182
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-07 - Load factory defaults IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_07_LoadFactoryDefaultsIonKeyParameters_Positive_Positive_Resolution()
        {
            this.ION_07_LoadFactoryDefaultsIonKeyParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-07 - Load factory defaults IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_07_LoadFactoryDefaultsIonKeyParameters_Positive_Positive_Sensitivity()
        {
            this.ION_07_LoadFactoryDefaultsIonKeyParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_08_LoadFactoryDefaultsIonKeyParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-08 - Load factory defaults IonKey parameters - Negative", exampleTags);
#line 199
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 200
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table9.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table9.AddRow(new string[] {
                        "Capillary",
                        "1.60"});
            table9.AddRow(new string[] {
                        "Cone",
                        "25"});
            table9.AddRow(new string[] {
                        "Source Temperature",
                        "150"});
            table9.AddRow(new string[] {
                        "Cone Gas",
                        "96"});
            table9.AddRow(new string[] {
                        "Purge Gas",
                        "888"});
            table9.AddRow(new string[] {
                        "Nano Flow Gas",
                        "1.75"});
            table9.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "100"});
#line 203
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table9, "When ");
#line 213
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table10.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50"});
            table10.AddRow(new string[] {
                        "Capillary",
                        "2.50"});
            table10.AddRow(new string[] {
                        "Cone",
                        "40"});
            table10.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table10.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table10.AddRow(new string[] {
                        "Purge Gas",
                        "800"});
            table10.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.30"});
            table10.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "0"});
#line 214
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-08 - Load factory defaults IonKey parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_08_LoadFactoryDefaultsIonKeyParameters_Negative_Negative_Resolution()
        {
            this.ION_08_LoadFactoryDefaultsIonKeyParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-08 - Load factory defaults IonKey parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_08_LoadFactoryDefaultsIonKeyParameters_Negative_Negative_Sensitivity()
        {
            this.ION_08_LoadFactoryDefaultsIonKeyParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_09_SaveAndLoadFactoryDefaultsIonKeyParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-09 - Save and Load factory defaults IonKey parameters", exampleTags);
#line 231
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 232
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.30"});
            table11.AddRow(new string[] {
                        "Capillary",
                        "2.30"});
            table11.AddRow(new string[] {
                        "Cone",
                        "55"});
            table11.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table11.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table11.AddRow(new string[] {
                        "Purge Gas",
                        "999"});
            table11.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.75"});
            table11.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "10"});
#line 235
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table11, "When ");
#line 245
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table12.AddRow(new string[] {
                        "Capillary",
                        "1.60"});
            table12.AddRow(new string[] {
                        "Cone",
                        "25"});
            table12.AddRow(new string[] {
                        "Source Temperature",
                        "150"});
            table12.AddRow(new string[] {
                        "Cone Gas",
                        "96"});
            table12.AddRow(new string[] {
                        "Purge Gas",
                        "888"});
            table12.AddRow(new string[] {
                        "Nano Flow Gas",
                        "1.75"});
            table12.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "100"});
#line 246
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table12, "When ");
#line 256
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table13.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.30"});
            table13.AddRow(new string[] {
                        "Capillary",
                        "2.30"});
            table13.AddRow(new string[] {
                        "Cone",
                        "55"});
            table13.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table13.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table13.AddRow(new string[] {
                        "Purge Gas",
                        "999"});
            table13.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.75"});
            table13.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "10"});
#line 257
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-09 - Save and Load factory defaults IonKey parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_09_SaveAndLoadFactoryDefaultsIonKeyParameters_Positive_Resolution()
        {
            this.ION_09_SaveAndLoadFactoryDefaultsIonKeyParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-09 - Save and Load factory defaults IonKey parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_09_SaveAndLoadFactoryDefaultsIonKeyParameters_Negative_Sensitivity()
        {
            this.ION_09_SaveAndLoadFactoryDefaultsIonKeyParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void ION_10_SaveAndLoadIonKeyParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ION-10 - Save and Load IonKey parameters - Positive", exampleTags);
#line 275
this.ScenarioSetup(scenarioInfo);
#line 39
this.FeatureBackground();
#line 276
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.And("the \'IonKey\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table14.AddRow(new string[] {
                        "Capillary",
                        "1.60"});
            table14.AddRow(new string[] {
                        "Cone",
                        "25"});
            table14.AddRow(new string[] {
                        "Source Temperature",
                        "150"});
            table14.AddRow(new string[] {
                        "Cone Gas",
                        "96"});
            table14.AddRow(new string[] {
                        "Purge Gas",
                        "888"});
            table14.AddRow(new string[] {
                        "Nano Flow Gas",
                        "1.75"});
            table14.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "100"});
#line 279
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table14, "When ");
#line 289
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.30"});
            table15.AddRow(new string[] {
                        "Capillary",
                        "2.30"});
            table15.AddRow(new string[] {
                        "Cone",
                        "55"});
            table15.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table15.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table15.AddRow(new string[] {
                        "Purge Gas",
                        "999"});
            table15.AddRow(new string[] {
                        "Nano Flow Gas",
                        "0.75"});
            table15.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "10"});
#line 290
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table15, "When ");
#line 300
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table16.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table16.AddRow(new string[] {
                        "Capillary",
                        "1.60"});
            table16.AddRow(new string[] {
                        "Cone",
                        "25"});
            table16.AddRow(new string[] {
                        "Source Temperature",
                        "150"});
            table16.AddRow(new string[] {
                        "Cone Gas",
                        "96"});
            table16.AddRow(new string[] {
                        "Purge Gas",
                        "888"});
            table16.AddRow(new string[] {
                        "Nano Flow Gas",
                        "1.75"});
            table16.AddRow(new string[] {
                        "Trap Cooling Gas",
                        "100"});
#line 301
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-10 - Save and Load IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_10_SaveAndLoadIonKeyParameters_Positive_Positive_Resolution()
        {
            this.ION_10_SaveAndLoadIonKeyParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-10 - Save and Load IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void ION_10_SaveAndLoadIonKeyParameters_Positive_Negative_Resolution()
        {
            this.ION_10_SaveAndLoadIonKeyParameters_Positive("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-10 - Save and Load IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_10_SaveAndLoadIonKeyParameters_Positive_Positive_Sensitivity()
        {
            this.ION_10_SaveAndLoadIonKeyParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ION-10 - Save and Load IonKey parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "IonKey source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void ION_10_SaveAndLoadIonKeyParameters_Positive_Negative_Sensitivity()
        {
            this.ION_10_SaveAndLoadIonKeyParameters_Positive("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
