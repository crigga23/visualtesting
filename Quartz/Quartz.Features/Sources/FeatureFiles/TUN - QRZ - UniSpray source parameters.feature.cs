// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Sources.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class UniSpraySourceParametersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TUN - QRZ - UniSpray source parameters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UniSpray source parameters", "In order to use an UniSpray source on the instrument\r\nI want to be able to see Un" +
                    "iSpray source specific parametere with readbacks for settings\r\nAnd to be able to" +
                    " modify, save and load the settings\r\nAnd apply the setting to the instrument", ProgrammingLanguage.CSharp, new string[] {
                        "ManualTune",
                        "Sources",
                        "Obsolete",
                        "ignore",
                        "cleanup_SourceSwitching"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "UniSpray source parameters")))
            {
                Quartz.Features.Sources.FeatureFiles.UniSpraySourceParametersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 41
#line 42
 testRunner.Given("UNISPRAY source is attached to the instrument", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
  testRunner.And("factory defaults have been loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-01 - UniSpray parameters availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void UNI_01_UniSprayParametersAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-01 - UniSpray parameters availability", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 48
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "Parameter",
                        "Readback"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "LockSpray Capillary",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Impactor target",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Cone",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Source Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Desolvation Temperature",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Cone Gas",
                        "Yes"});
            table1.AddRow(new string[] {
                        "UniSpray",
                        "Desolvation Gas",
                        "Yes"});
#line 50
 testRunner.Then("the following \'UniSpray\' source parameters and readbacks are available", ((string)(null)), table1, "Then ");
#line 59
  testRunner.And("only these \'6\' parameters are displayed on the \'UniSpray\' tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UNI_02_UniSprayDefaultParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-02 - UniSpray default parameters - Positive", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 64
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table2.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Impactor target",
                        "1.00",
                        "0.01",
                        "kV"});
            table2.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table2.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table2.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "1",
                        "°C"});
            table2.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table2.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "1",
                        "L/hour"});
#line 67
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-02 - UniSpray default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_02_UniSprayDefaultParameters_Positive_Positive_Resolution()
        {
            this.UNI_02_UniSprayDefaultParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-02 - UniSpray default parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_02_UniSprayDefaultParameters_Positive_Positive_Sensitivity()
        {
            this.UNI_02_UniSprayDefaultParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_03_UniSprayDefaultParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FunctionalityIncomplete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-03 - UniSpray default parameters - Negative", @__tags);
#line 84
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 85
 testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "Resolution",
                        "UOM"});
            table3.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Cone",
                        "40",
                        "1",
                        "V"});
            table3.AddRow(new string[] {
                        "Impactor target",
                        "1",
                        "0.01",
                        "kV"});
            table3.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "1",
                        "°C"});
            table3.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "1",
                        "L/hour"});
            table3.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "1",
                        "L/hour"});
#line 88
 testRunner.Then("each Parameter has the following Default Value, Resolution and UOM", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-03 - UniSpray default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_03_UniSprayDefaultParameters_Negative_Negative_Resolution()
        {
            this.UNI_03_UniSprayDefaultParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-03 - UniSpray default parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FunctionalityIncomplete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_03_UniSprayDefaultParameters_Negative_Negative_Sensitivity()
        {
            this.UNI_03_UniSprayDefaultParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-04 - UniSpray parameters ranges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        public virtual void UNI_04_UniSprayParametersRanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-04 - UniSpray parameters ranges", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 106
  testRunner.When("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Min",
                        "Max",
                        "Resolution"});
            table4.AddRow(new string[] {
                        "LockSpray Capillary",
                        "0.00",
                        "5.00",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Impactor target",
                        "0.00",
                        "4.00",
                        "0.01"});
            table4.AddRow(new string[] {
                        "Cone",
                        "0",
                        "200",
                        "1"});
            table4.AddRow(new string[] {
                        "Source Temperature",
                        "20",
                        "150",
                        "1"});
            table4.AddRow(new string[] {
                        "Desolvation Temperature",
                        "20",
                        "650",
                        "1"});
            table4.AddRow(new string[] {
                        "Cone Gas",
                        "0",
                        "300",
                        "1"});
            table4.AddRow(new string[] {
                        "Desolvation Gas",
                        "300",
                        "1200",
                        "1"});
#line 108
 testRunner.Then("Source values outside the Min or Max cannot be entered for the following paramete" +
                    "rs", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UNI_05_UniSprayReadbacks_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-05 - UniSpray readbacks - Positive", exampleTags);
#line 120
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 121
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table5.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00",
                        "3.75"});
            table5.AddRow(new string[] {
                        "Impactor target",
                        "1.00",
                        "1.70"});
            table5.AddRow(new string[] {
                        "Cone",
                        "40",
                        "75"});
            table5.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "131"});
            table5.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "333"});
            table5.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "66"});
            table5.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "555"});
#line 125
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-05 - UniSpray readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_05_UniSprayReadbacks_Positive_Positive_Resolution()
        {
            this.UNI_05_UniSprayReadbacks_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-05 - UniSpray readbacks - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_05_UniSprayReadbacks_Positive_Positive_Sensitivity()
        {
            this.UNI_05_UniSprayReadbacks_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_06_UniSprayReadbacks_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-06 - UniSpray readbacks - Negative", exampleTags);
#line 141
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 142
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
  testRunner.And("the instrument is in \'Operate\' mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.When(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value",
                        "New Value"});
            table6.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50",
                        "1.75"});
            table6.AddRow(new string[] {
                        "Impactor target",
                        "1.00",
                        "2.70"});
            table6.AddRow(new string[] {
                        "Cone",
                        "40",
                        "10"});
            table6.AddRow(new string[] {
                        "Source Temperature",
                        "100",
                        "80"});
            table6.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250",
                        "400"});
            table6.AddRow(new string[] {
                        "Cone Gas",
                        "50",
                        "90"});
            table6.AddRow(new string[] {
                        "Desolvation Gas",
                        "600",
                        "450"});
#line 146
 testRunner.Then("if the Default Value is changed to a New Value\tthe Readback starts updating towar" +
                    "ds the new value", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-06 - UniSpray readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_06_UniSprayReadbacks_Negative_Negative_Resolution()
        {
            this.UNI_06_UniSprayReadbacks_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-06 - UniSpray readbacks - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_06_UniSprayReadbacks_Negative_Negative_Sensitivity()
        {
            this.UNI_06_UniSprayReadbacks_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_07_LoadFactoryDefaultsUniSprayParameters_Positive(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-07 - Load factory defaults UniSpray parameters - Positive", exampleTags);
#line 163
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 164
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table7.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table7.AddRow(new string[] {
                        "Impactor target",
                        "1.70"});
            table7.AddRow(new string[] {
                        "Cone",
                        "100"});
            table7.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table7.AddRow(new string[] {
                        "Desolvation Temperature",
                        "333"});
            table7.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table7.AddRow(new string[] {
                        "Desolvation Gas",
                        "555"});
#line 167
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table7, "When ");
#line 176
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table8.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.00"});
            table8.AddRow(new string[] {
                        "Impactor target",
                        "1.00"});
            table8.AddRow(new string[] {
                        "Cone",
                        "40"});
            table8.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table8.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250"});
            table8.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table8.AddRow(new string[] {
                        "Desolvation Gas",
                        "600"});
#line 177
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-07 - Load factory defaults UniSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_07_LoadFactoryDefaultsUniSprayParameters_Positive_Positive_Resolution()
        {
            this.UNI_07_LoadFactoryDefaultsUniSprayParameters_Positive("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-07 - Load factory defaults UniSpray parameters - Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_07_LoadFactoryDefaultsUniSprayParameters_Positive_Positive_Sensitivity()
        {
            this.UNI_07_LoadFactoryDefaultsUniSprayParameters_Positive("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_08_LoadFactoryDefaultsUniSprayParameters_Negative(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-08 - Load factory defaults UniSpray parameters - Negative", exampleTags);
#line 193
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 194
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 195
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table9.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table9.AddRow(new string[] {
                        "Impactor target",
                        "0.70"});
            table9.AddRow(new string[] {
                        "Cone",
                        "150"});
            table9.AddRow(new string[] {
                        "Source Temperature",
                        "80"});
            table9.AddRow(new string[] {
                        "Desolvation Temperature",
                        "150"});
            table9.AddRow(new string[] {
                        "Cone Gas",
                        "90"});
            table9.AddRow(new string[] {
                        "Desolvation Gas",
                        "700"});
#line 197
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table9, "When ");
#line 206
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table10.AddRow(new string[] {
                        "LockSpray Capillary",
                        "2.50"});
            table10.AddRow(new string[] {
                        "Impactor target",
                        "1.00"});
            table10.AddRow(new string[] {
                        "Cone",
                        "40"});
            table10.AddRow(new string[] {
                        "Source Temperature",
                        "100"});
            table10.AddRow(new string[] {
                        "Desolvation Temperature",
                        "250"});
            table10.AddRow(new string[] {
                        "Cone Gas",
                        "50"});
            table10.AddRow(new string[] {
                        "Desolvation Gas",
                        "600"});
#line 207
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-08 - Load factory defaults UniSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_08_LoadFactoryDefaultsUniSprayParameters_Negative_Negative_Resolution()
        {
            this.UNI_08_LoadFactoryDefaultsUniSprayParameters_Negative("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-08 - Load factory defaults UniSpray parameters - Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_08_LoadFactoryDefaultsUniSprayParameters_Negative_Negative_Sensitivity()
        {
            this.UNI_08_LoadFactoryDefaultsUniSprayParameters_Negative("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_09_SaveAndLoadFactoryDefaultsUniSprayParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-09 - Save and Load factory defaults UniSpray parameters", exampleTags);
#line 223
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 224
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 225
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table11.AddRow(new string[] {
                        "Impactor target",
                        "1.70"});
            table11.AddRow(new string[] {
                        "Cone",
                        "90"});
            table11.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table11.AddRow(new string[] {
                        "Desolvation Temperature",
                        "333"});
            table11.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table11.AddRow(new string[] {
                        "Desolvation Gas",
                        "555"});
#line 227
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table11, "When ");
#line 236
  testRunner.And("Factory Defaults are \'Saved\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table12.AddRow(new string[] {
                        "Impactor target",
                        "0.70"});
            table12.AddRow(new string[] {
                        "Cone",
                        "150"});
            table12.AddRow(new string[] {
                        "Source Temperature",
                        "80"});
            table12.AddRow(new string[] {
                        "Desolvation Temperature",
                        "150"});
            table12.AddRow(new string[] {
                        "Cone Gas",
                        "90"});
            table12.AddRow(new string[] {
                        "Desolvation Gas",
                        "700"});
#line 237
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table12, "When ");
#line 246
  testRunner.And("Factory Defaults are \'Loaded\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Default Value"});
            table13.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.50"});
            table13.AddRow(new string[] {
                        "Impactor target",
                        "1.70"});
            table13.AddRow(new string[] {
                        "Cone",
                        "90"});
            table13.AddRow(new string[] {
                        "Source Temperature",
                        "111"});
            table13.AddRow(new string[] {
                        "Desolvation Temperature",
                        "333"});
            table13.AddRow(new string[] {
                        "Cone Gas",
                        "66"});
            table13.AddRow(new string[] {
                        "Desolvation Gas",
                        "555"});
#line 247
 testRunner.Then("the following default values are loaded for the parameters", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-09 - Save and Load factory defaults UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_09_SaveAndLoadFactoryDefaultsUniSprayParameters_Positive_Resolution()
        {
            this.UNI_09_SaveAndLoadFactoryDefaultsUniSprayParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-09 - Save and Load factory defaults UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_09_SaveAndLoadFactoryDefaultsUniSprayParameters_Negative_Sensitivity()
        {
            this.UNI_09_SaveAndLoadFactoryDefaultsUniSprayParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
        
        public virtual void UNI_10_SaveAndLoadUniSprayParameters(string testName, string polarity, string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNI-10 - Save and Load UniSpray parameters", exampleTags);
#line 263
this.ScenarioSetup(scenarioInfo);
#line 41
this.FeatureBackground();
#line 264
 testRunner.Given("the browser is opened on the Tune page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 265
  testRunner.And("the \'UniSpray\' tab is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
  testRunner.And(string.Format("the mode is {0} and the polarity is {1}", mode, polarity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.58"});
            table14.AddRow(new string[] {
                        "Impactor target",
                        "1.78"});
            table14.AddRow(new string[] {
                        "Cone",
                        "50"});
            table14.AddRow(new string[] {
                        "Source Temperature",
                        "115"});
            table14.AddRow(new string[] {
                        "Desolvation Temperature",
                        "340"});
            table14.AddRow(new string[] {
                        "Cone Gas",
                        "70"});
            table14.AddRow(new string[] {
                        "Desolvation Gas",
                        "580"});
#line 267
 testRunner.When("new values are entered for the following parameters", ((string)(null)), table14, "When ");
#line 276
  testRunner.And("a \'Save Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table15.AddRow(new string[] {
                        "LockSpray Capillary",
                        "1.50"});
            table15.AddRow(new string[] {
                        "Impactor target",
                        "0.70"});
            table15.AddRow(new string[] {
                        "Cone",
                        "90"});
            table15.AddRow(new string[] {
                        "Source Temperature",
                        "80"});
            table15.AddRow(new string[] {
                        "Desolvation Temperature",
                        "150"});
            table15.AddRow(new string[] {
                        "Cone Gas",
                        "90"});
            table15.AddRow(new string[] {
                        "Desolvation Gas",
                        "700"});
#line 277
 testRunner.When("I enter different values for the following parameters", ((string)(null)), table15, "When ");
#line 286
  testRunner.And("a \'Load Set\' is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table16.AddRow(new string[] {
                        "LockSpray Capillary",
                        "3.58"});
            table16.AddRow(new string[] {
                        "Impactor target",
                        "1.78"});
            table16.AddRow(new string[] {
                        "Cone",
                        "50"});
            table16.AddRow(new string[] {
                        "Source Temperature",
                        "115"});
            table16.AddRow(new string[] {
                        "Desolvation Temperature",
                        "340"});
            table16.AddRow(new string[] {
                        "Cone Gas",
                        "70"});
            table16.AddRow(new string[] {
                        "Desolvation Gas",
                        "580"});
#line 287
 testRunner.Then("the following values are loaded for the parameters", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-10 - Save and Load UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_10_SaveAndLoadUniSprayParameters_Positive_Resolution()
        {
            this.UNI_10_SaveAndLoadUniSprayParameters("Positive_Resolution", "Positive", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-10 - Save and Load UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Resolution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Resolution")]
        public virtual void UNI_10_SaveAndLoadUniSprayParameters_Negative_Resolution()
        {
            this.UNI_10_SaveAndLoadUniSprayParameters("Negative_Resolution", "Negative", "Resolution", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-10 - Save and Load UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Positive_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_10_SaveAndLoadUniSprayParameters_Positive_Sensitivity()
        {
            this.UNI_10_SaveAndLoadUniSprayParameters("Positive_Sensitivity", "Positive", "Sensitivity", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UNI-10 - Save and Load UniSpray parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UniSpray source parameters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualTune")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sources")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Obsolete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cleanup_SourceSwitching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Name", "Negative_Sensitivity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Polarity", "Negative")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Mode", "Sensitivity")]
        public virtual void UNI_10_SaveAndLoadUniSprayParameters_Negative_Sensitivity()
        {
            this.UNI_10_SaveAndLoadUniSprayParameters("Negative_Sensitivity", "Negative", "Sensitivity", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
