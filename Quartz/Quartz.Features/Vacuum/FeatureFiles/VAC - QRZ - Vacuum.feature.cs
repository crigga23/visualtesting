// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Quartz.Features.Vacuum.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class VAC_QRZ_VacuumFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VAC - QRZ - Vacuum.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VAC - QRZ - Vacuum", "In order to check / change the \'Vacuum\' status\r\nI want to be able to access infor" +
                    "mation related to \'Vacuum Status\', \'Vacuum pressures\', \'Turbo Speeds\' and \'Turbo" +
                    " Operation Times\'\r\nAnd I want to be able to \'Vent\' / \'Pump down\' the instrument " +
                    "as required", ProgrammingLanguage.CSharp, new string[] {
                        "Vacuum"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "VAC - QRZ - Vacuum")))
            {
                Quartz.Features.Vacuum.FeatureFiles.VAC_QRZ_VacuumFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-01 - Vacuum Availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_01_VacuumAvailability()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-01 - Vacuum Availability", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sections"});
            table1.AddRow(new string[] {
                        "Status"});
            table1.AddRow(new string[] {
                        "Pressures (mBar)"});
            table1.AddRow(new string[] {
                        "Turbo Speeds (%)"});
            table1.AddRow(new string[] {
                        "Turbo Operation Times (hours)"});
#line 70
 testRunner.Then("the following vacuum page sections will be available", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void VAC_02_PumpOverrideWarningStatus(string pumpOverride, string warning, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SimulatorOnly",
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-02 - Pump Override Warning Status", @__tags);
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
  testRunner.And(string.Format("the Pump Override status is \'{0}\'", pumpOverride), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then(string.Format("\'{0}\' will be displayed related to the pump override", warning), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-02 - Pump Override Warning Status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Pump Override", "Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Warning", "Pump override active")]
        public virtual void VAC_02_PumpOverrideWarningStatus_Active()
        {
            this.VAC_02_PumpOverrideWarningStatus("Active", "Pump override active", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-02 - Pump Override Warning Status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Pump Override", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Warning", "N/A (No Warning)")]
        public virtual void VAC_02_PumpOverrideWarningStatus_NotActive()
        {
            this.VAC_02_PumpOverrideWarningStatus("Not Active", "N/A (No Warning)", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-03 - Turbo Operation Times")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_03_TurboOperationTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-03 - Turbo Operation Times", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("Turbo Operation Time controls are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
  testRunner.And("the Turbo Operation Times display the correct units of measure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void VAC_04_PumpingVenting(string initialState, string toggleInstrumentVacuumStatus, string newOption, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SimulatorOnly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-04 - Pumping / Venting", @__tags);
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
  testRunner.And(string.Format("the vacuum status is \'{0}\'", initialState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
  testRunner.And(string.Format("the option to \'{0}\' is selected", toggleInstrumentVacuumStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.Then(string.Format("the vacuum instrument button caption will be \'{0}\'", newOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-04 - Pumping / Venting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Venting: Vent Valve Open")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial State", "Venting: Vent Valve Open")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Toggle Instrument Vacuum Status", "Pump Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:New Option", "Vent Instrument")]
        public virtual void VAC_04_PumpingVenting_VentingVentValveOpen()
        {
            this.VAC_04_PumpingVenting("Venting: Vent Valve Open", "Pump Instrument", "Vent Instrument", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-04 - Pumping / Venting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Instrument Pumped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial State", "Instrument Pumped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Toggle Instrument Vacuum Status", "Vent Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:New Option", "Pump Instrument")]
        public virtual void VAC_04_PumpingVenting_InstrumentPumped()
        {
            this.VAC_04_PumpingVenting("Instrument Pumped", "Vent Instrument", "Pump Instrument", ((string[])(null)));
        }
        
        public virtual void VAC_05_ActionChangingInstrumentVacuumStatus_PumpOverrideOFF(string pumpOverride, string initialState, string action, string intermediate1, string intermediate2, string final, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SimulatorOnly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-05 - Action Changing Instrument Vacuum Status - Pump Override OFF", @__tags);
#line 122
this.ScenarioSetup(scenarioInfo);
#line 123
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 124
  testRunner.And(string.Format("the Pump Override status is \'{0}\'", pumpOverride), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
  testRunner.And("the vacuum is not venting or pumping", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And(string.Format("the vacuum status is \'{0}\'", initialState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When(string.Format("a vacuum \'{0}\' action is attempted", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then(string.Format("there will be an \'{0}\' followed by an \'{1}\' and finally \'{2}\' instrument vacuum s" +
                        "tatus", intermediate1, intermediate2, final), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-05 - Action Changing Instrument Vacuum Status - Pump Override OFF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Vent Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Pump Override", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial State", "Instrument Pumped")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "Vent Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 1", "Venting: Pump slow down")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 2", "Venting delay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final", "Venting: Vent valve open")]
        public virtual void VAC_05_ActionChangingInstrumentVacuumStatus_PumpOverrideOFF_VentInstrument_NotActive()
        {
            this.VAC_05_ActionChangingInstrumentVacuumStatus_PumpOverrideOFF("Not Active", "Instrument Pumped", "Vent Instrument", "Venting: Pump slow down", "Venting delay", "Venting: Vent valve open", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-05 - Action Changing Instrument Vacuum Status - Pump Override OFF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Pump Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Pump Override", "Not Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial State", "Venting: Vent Valve Open")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "Pump Instrument")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 1", "Rough Pumping - Turbo Pumps Off")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 2", "Pumping: Waiting for Pump Speed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final", "Instrument Pumped")]
        public virtual void VAC_05_ActionChangingInstrumentVacuumStatus_PumpOverrideOFF_PumpInstrument_NotActive()
        {
            this.VAC_05_ActionChangingInstrumentVacuumStatus_PumpOverrideOFF("Not Active", "Venting: Vent Valve Open", "Pump Instrument", "Rough Pumping - Turbo Pumps Off", "Pumping: Waiting for Pump Speed", "Instrument Pumped", ((string[])(null)));
        }
        
        public virtual void VAC_06_ActionChangingInstrumentVacuumStatus_PumpOverrideON(string pumpOverride, string initialState, string action, string intermediate1, string intermediate2, string final, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SimulatorOnly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-06 - Action Changing Instrument Vacuum Status - Pump Override ON", @__tags);
#line 142
this.ScenarioSetup(scenarioInfo);
#line 143
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
  testRunner.And(string.Format("the vacuum status is \'{0}\'", initialState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And(string.Format("the Pump Override status is \'{0}\'", pumpOverride), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When(string.Format("a vacuum \'{0}\' action is attempted", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then(string.Format("there will be an \'{0}\' followed by an \'{1}\' and finally \'{2}\' instrument vacuum s" +
                        "tatus", intermediate1, intermediate2, final), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-06 - Action Changing Instrument Vacuum Status - Pump Override ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Pump Override ON-Pump")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Pump Override", "Active")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Initial State", "Venting: Vent Valve Open")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Action", "N/A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 1", "Rough Pumping - Turbo Pumps Off")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Intermediate 2", "Pumping: Waiting for Pump Speed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Final", "Instrument Pumped")]
        public virtual void VAC_06_ActionChangingInstrumentVacuumStatus_PumpOverrideON_PumpOverrideON_Pump_Active()
        {
            this.VAC_06_ActionChangingInstrumentVacuumStatus_PumpOverrideON("Active", "Venting: Vent Valve Open", "N/A", "Rough Pumping - Turbo Pumps Off", "Pumping: Waiting for Pump Speed", "Instrument Pumped", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-07 - Instrument Vacuum Status - Fully Pumped and Pump Override ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void VAC_07_InstrumentVacuumStatus_FullyPumpedAndPumpOverrideON()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-07 - Instrument Vacuum Status - Fully Pumped and Pump Override ON", new string[] {
                        "SimulatorOnly"});
#line 154
this.ScenarioSetup(scenarioInfo);
#line 155
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
  testRunner.And("the vacuum status is \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And("the Pump Override status is \'Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.Then("the vacuum status will remain at \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-08 - Instrument Crash Vent (part 1)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void VAC_08_InstrumentCrashVentPart1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-08 - Instrument Crash Vent (part 1)", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
 testRunner.Given("the Vacuum Status is \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
 testRunner.When("the instrument source cone is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
  testRunner.And("the instrument source cone valve is opened fully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.Then("the instrument will start crash venting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
  testRunner.And("after some time the Vacuum Status will read \"PUMP FAIL: Set Vent to recover\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
  testRunner.And("the option to \"Vent Instrument\" is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-09 - Instrument Crash Vent (part 2)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ManualOnly")]
        public virtual void VAC_09_InstrumentCrashVentPart2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-09 - Instrument Crash Vent (part 2)", new string[] {
                        "ignore",
                        "ManualOnly"});
#line 173
this.ScenarioSetup(scenarioInfo);
#line 174
 testRunner.Given("the instrument has been crash vented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 175
  testRunner.And("the Vacuum Status reads \"PUMP FAIL: Set Vent to recover\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
  testRunner.And("the option to \'Vent Instrument\' is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.When("\'Vent Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("the Vacuum Status will read \"Venting: Vent Valve Open\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
  testRunner.And("the button text will read \"Pump Instrument\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-10 - Vacuum Pressure Gauges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_10_VacuumPressureGauges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-10 - Vacuum Pressure Gauges", ((string[])(null)));
#line 185
this.ScenarioSetup(scenarioInfo);
#line 186
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.Then("the vacuum pressure gauges are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
  testRunner.And("the pressures will be measured in \'mBar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-11 - Monitoring Vacuum Pressure Gauges (Pumping Down) - Backing / Collision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void VAC_11_MonitoringVacuumPressureGaugesPumpingDown_BackingCollision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-11 - Monitoring Vacuum Pressure Gauges (Pumping Down) - Backing / Collision", new string[] {
                        "SimulatorOnly"});
#line 191
this.ScenarioSetup(scenarioInfo);
#line 192
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 193
  testRunner.And("the vacuum status is \'Venting: Vent Valve Open\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.When("the option to \'Pump Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
 testRunner.Then("the Vacuum Pressure Gauges will move from the \'Red\' region into the \'Green\' regio" +
                    "n over the period of the \'pumping down\' process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-12 - Monitoring Vacuum Pressure Gauges (Venting) - Backing / Collision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void VAC_12_MonitoringVacuumPressureGaugesVenting_BackingCollision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-12 - Monitoring Vacuum Pressure Gauges (Venting) - Backing / Collision", new string[] {
                        "SimulatorOnly"});
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
  testRunner.And("the vacuum status is \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
  testRunner.And("the Pump Override status is \'Not Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.When("the option to \'Vent Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
 testRunner.Then("the Vacuum Pressure Gauges will move from the \'Green\' region into the \'Red\' regio" +
                    "n over the period of the \'venting\' process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-13 - Monitoring Vacuum Pressure Gauges (Pumping Down) - TOF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void VAC_13_MonitoringVacuumPressureGaugesPumpingDown_TOF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-13 - Monitoring Vacuum Pressure Gauges (Pumping Down) - TOF", new string[] {
                        "SimulatorOnly",
                        "SmokeTest"});
#line 208
this.ScenarioSetup(scenarioInfo);
#line 209
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
  testRunner.And("the vacuum status is \'Venting: Vent Valve Open\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.When("the option to \'Pump Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("the \'TOF\' Pressure Gauge is in the \'Red\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
  testRunner.And("after some time the \'TOF\' Turbo Speed Gauge will move into the \'Green\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And("the \'TOF\' Pressure Gauge will move from the \'Orange\' region to \'Yellow\' and then " +
                    "to \'Green\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-14 - Monitoring Vacuum Pressure Gauges (Venting) - TOF")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void VAC_14_MonitoringVacuumPressureGaugesVenting_TOF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-14 - Monitoring Vacuum Pressure Gauges (Venting) - TOF", new string[] {
                        "SimulatorOnly"});
#line 217
this.ScenarioSetup(scenarioInfo);
#line 218
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 219
  testRunner.And("the vacuum status is \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
  testRunner.And("the Pump Override status is \'Not Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
  testRunner.And("the option to \'Vent Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.Then("the \'TOF\' Pressure Gauge will move from the \'Green\' region to \'Yellow\' and then t" +
                    "o \'Orange\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
  testRunner.And("after some time the \'TOF\' Turbo Speed Gauge will move into the \'Red\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
  testRunner.And("the \'TOF\' Pressure Gauge will finally move into the \'Red\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-15 - Turbo Speed Gauges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_15_TurboSpeedGauges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-15 - Turbo Speed Gauges", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 233
 testRunner.Then("the Turbo Speed Gauges are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
  testRunner.And("the speeds will be measured in \'%\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-16 - Monitoring Turbo Speed Gauges (Pumping Down)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        public virtual void VAC_16_MonitoringTurboSpeedGaugesPumpingDown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-16 - Monitoring Turbo Speed Gauges (Pumping Down)", new string[] {
                        "SimulatorOnly"});
#line 237
this.ScenarioSetup(scenarioInfo);
#line 238
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
  testRunner.And("the vacuum status is \'Venting: Vent Valve Open\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
  testRunner.And("all Turbo Speed Gauges are in the \'Red\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
  testRunner.And("all Turbo Speed Gauges are at 0%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.When("the option to \'Pump Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 243
 testRunner.Then("all Turbo Speed Gauges will progressively increase to 100%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
  testRunner.And("all Turbo Speed Gauges will be in the \'Green\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-17 - Monitoring Turbo Speed Gauges (Venting)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SimulatorOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SmokeTest")]
        public virtual void VAC_17_MonitoringTurboSpeedGaugesVenting()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-17 - Monitoring Turbo Speed Gauges (Venting)", new string[] {
                        "SimulatorOnly",
                        "SmokeTest"});
#line 248
this.ScenarioSetup(scenarioInfo);
#line 249
 testRunner.Given("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 250
  testRunner.And("the vacuum status is \'Instrument Pumped\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
  testRunner.And("the Pump Override status is \'Not Active\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
  testRunner.And("all Turbo Speed Gauges are in the \'Green\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
  testRunner.And("all Turbo Speed Gauges are at 100%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.When("the option to \'Vent Instrument\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 255
 testRunner.Then("all Turbo Speed Gauges will progressively decrease to 0%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 256
  testRunner.And("all Turbo Speed Gauges will be in the \'Red\' region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-18 - Capabilities - Vacuum Gauges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_18_Capabilities_VacuumGauges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-18 - Capabilities - Vacuum Gauges", ((string[])(null)));
#line 267
this.ScenarioSetup(scenarioInfo);
#line 268
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
 testRunner.Then("the correct number of Pressure Gauges are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 270
  testRunner.And("the Pressure Gauges are of the correct type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-19 - Capabilities - Turbo Speed Gauges")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_19_Capabilities_TurboSpeedGauges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-19 - Capabilities - Turbo Speed Gauges", ((string[])(null)));
#line 272
this.ScenarioSetup(scenarioInfo);
#line 273
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 274
 testRunner.Then("the correct number of Turbo Speed gauges are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
  testRunner.And("each Turbo Speed gauge has the correct red and green zones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("VAC-20 - Capabilities - Turbo Operation Times")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VAC - QRZ - Vacuum")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Vacuum")]
        public virtual void VAC_20_Capabilities_TurboOperationTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("VAC-20 - Capabilities - Turbo Operation Times", ((string[])(null)));
#line 277
this.ScenarioSetup(scenarioInfo);
#line 278
 testRunner.When("the Vacuum page is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("each Turbo Operation Time is to the correct precision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
